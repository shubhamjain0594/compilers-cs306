[[parse.y (info)] Line 138: 
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: statement ('=') ->  lhs '=' term
2: lhs ->  unop lhs
3: lhs (id) ->  id
4: term ('*') ->  term '*' factor
5: term ->  factor
6: factor (intconst) ->  intconst
7: factor (floatconst) ->  floatconst
8: factor ('(') ->  '(' term ')'
9: factor ->  unop factor
10: factor (id) ->  id
11: unop ('-') ->  '-'
12: unop ('*') ->  '*'
13: statement_$ ->  statement

[[parse.y (info)] 
Symbolic Terminal tokens:
       error
       EOF
   257: id
   258: intconst
   259: floatconst
    61: '='
    42: '*'
    40: '('
    41: ')'
    45: '-'

[[parse.y (info)] 
FIRST sets:
   statement: { id '-' '*' }
   lhs:      { id '-' '*' }
   term:     { id intconst floatconst '-' '(' '*' }
   factor:   { id intconst floatconst '-' '(' '*' }
   unop:     { '-' '*' }
   statement_$: { id '-' '*' }

[[parse.y (info)] 
FOLLOW sets:
   statement: { <EOF> }
   lhs:      { '=' }
   term:     { '*' ')' <EOF> }
   factor:   { '*' ')' <EOF> }
   unop:     { id intconst floatconst '-' '(' '*' }
   statement_$: { <EOF> }

[[parse.y (info)] 
Grammar States: 
[[parse.y (info)] 
For each state information like the following is shown for its items:
   0: [P1 1] S -> C  . C   { <EOF> }  0, (1 2 ) 0
which should be read as follows:
   0:          The item's index
   [P1 1]:     The rule (production) number and current dot-position
   S -> C . C: The item (lhs -> Recognized-symbols . symbols-to-recognize)
   { <EOF> }   The item's lookahead (LA) set
   0,          The next state's LA set is not enlarged (1: it is enlarged)
   (1 2)       Item indices of items whose LA sets depend on this item
   0           The next-element (shown below the items) describing the
               action associated with this item (-1 for reducible items)

The Next tables show entries like:
   0: On C to state 5 with (0 )
meaning:
   0:               The Next table's index
   On C to state 5: When C was recognized, continue at state 5
   with (0 )        The item(s) whose dot is shifted at the next state
Indices (like 0:) may be annotated as follows:
   0 (AUTO REMOVED by S/R resolution): On C ...
       in which case a reduction using a production with unspecified
       precedence took priority;
or:
   0 (removed by precedence): On C ...
       in which case a production rule's precedence took priority
Also, reduction item(s) may be listed


State 0:
0: [P13 0] statement_$ ->  . statement   { <EOF> }  0, (1 ) 0
1: [P1 0] statement ->  . lhs '=' term   { <EOF> }  0, (2 3 ) 1
2: [P2 0] lhs ->  . unop lhs   { '=' }  0, (4 5 ) 2
3: [P3 0] lhs ->  . id   { '=' }  0, () 3
4: [P11 0] unop ->  . '-'   { id '-' '*' }  0, () 4
5: [P12 0] unop ->  . '*'   { id '-' '*' }  0, () 5
  0:   On statement to state 1 with (0 )
  1:   On lhs to state 2 with (1 )
  2:   On unop to state 3 with (2 )
  3:   On id to state 4 with (3 )
  4:   On '-' to state 5 with (4 )
  5:   On '*' to state 6 with (5 )


State 1:
0: [P13 1] statement_$ -> statement  .   { <EOF> }  1, () -1


State 2:
0: [P1 1] statement -> lhs  . '=' term   { <EOF> }  0, () 0
  0:   On '=' to state 7 with (0 )


State 3:
0: [P2 1] lhs -> unop  . lhs   { '=' }  0, (1 2 ) 0
1: [P2 0] lhs ->  . unop lhs   { '=' }  0, (3 4 ) 1
2: [P3 0] lhs ->  . id   { '=' }  0, () 2
3: [P11 0] unop ->  . '-'   { id '-' '*' }  0, () 3
4: [P12 0] unop ->  . '*'   { id '-' '*' }  0, () 4
  0:   On lhs to state 8 with (0 )
  1:   On unop to state 3 with (1 )
  2:   On id to state 4 with (2 )
  3:   On '-' to state 5 with (3 )
  4:   On '*' to state 6 with (4 )


State 4:
0: [P3 1] lhs -> id  .   { '=' }  1, () -1
  Reduce item(s): 0 


State 5:
0: [P11 1] unop -> '-'  .   { id intconst floatconst '-' '(' '*' }  1, () -1
  Reduce item(s): 0 


State 6:
0: [P12 1] unop -> '*'  .   { id intconst floatconst '-' '(' '*' }  1, () -1
  Reduce item(s): 0 


State 7:
0: [P1 2] statement -> lhs '='  . term   { <EOF> }  0, (1 2 ) 0
1: [P4 0] term ->  . term '*' factor   { '*' <EOF> }  0, (1 2 ) 0
2: [P5 0] term ->  . factor   { '*' <EOF> }  0, (3 4 5 6 7 ) 1
3: [P6 0] factor ->  . intconst   { '*' <EOF> }  0, () 2
4: [P7 0] factor ->  . floatconst   { '*' <EOF> }  0, () 3
5: [P8 0] factor ->  . '(' term ')'   { '*' <EOF> }  0, () 4
6: [P9 0] factor ->  . unop factor   { '*' <EOF> }  0, (8 9 ) 5
7: [P10 0] factor ->  . id   { '*' <EOF> }  0, () 6
8: [P11 0] unop ->  . '-'   { id intconst floatconst '-' '(' '*' }  0, () 7
9: [P12 0] unop ->  . '*'   { id intconst floatconst '-' '(' '*' }  0, () 8
  0:   On term to state 9 with (0 1 )
  1:   On factor to state 10 with (2 )
  2:   On intconst to state 11 with (3 )
  3:   On floatconst to state 12 with (4 )
  4:   On '(' to state 13 with (5 )
  5:   On unop to state 14 with (6 )
  6:   On id to state 15 with (7 )
  7:   On '-' to state 5 with (8 )
  8:   On '*' to state 6 with (9 )


State 8:
0: [P2 2] lhs -> unop lhs  .   { '=' }  1, () -1
  Reduce item(s): 0 


State 9:
0: [P1 3] statement -> lhs '=' term  .   { <EOF> }  1, () -1
1: [P4 1] term -> term  . '*' factor   { '*' <EOF> }  0, () 0
  0:   On '*' to state 16 with (1 )
  Reduce item(s): 0 


State 10:
0: [P5 1] term -> factor  .   { '*' ')' <EOF> }  1, () -1
  Reduce item(s): 0 


State 11:
0: [P6 1] factor -> intconst  .   { '*' ')' <EOF> }  1, () -1
  Reduce item(s): 0 


State 12:
0: [P7 1] factor -> floatconst  .   { '*' ')' <EOF> }  1, () -1
  Reduce item(s): 0 


State 13:
0: [P8 1] factor -> '('  . term ')'   { '*' ')' <EOF> }  0, (1 2 ) 0
1: [P4 0] term ->  . term '*' factor   { '*' ')' }  0, (1 2 ) 0
2: [P5 0] term ->  . factor   { '*' ')' }  0, (3 4 5 6 7 ) 1
3: [P6 0] factor ->  . intconst   { '*' ')' }  0, () 2
4: [P7 0] factor ->  . floatconst   { '*' ')' }  0, () 3
5: [P8 0] factor ->  . '(' term ')'   { '*' ')' }  0, () 4
6: [P9 0] factor ->  . unop factor   { '*' ')' }  0, (8 9 ) 5
7: [P10 0] factor ->  . id   { '*' ')' }  0, () 6
8: [P11 0] unop ->  . '-'   { id intconst floatconst '-' '(' '*' }  0, () 7
9: [P12 0] unop ->  . '*'   { id intconst floatconst '-' '(' '*' }  0, () 8
  0:   On term to state 17 with (0 1 )
  1:   On factor to state 10 with (2 )
  2:   On intconst to state 11 with (3 )
  3:   On floatconst to state 12 with (4 )
  4:   On '(' to state 13 with (5 )
  5:   On unop to state 14 with (6 )
  6:   On id to state 15 with (7 )
  7:   On '-' to state 5 with (8 )
  8:   On '*' to state 6 with (9 )


State 14:
0: [P9 1] factor -> unop  . factor   { '*' ')' <EOF> }  0, (1 2 3 4 5 ) 0
1: [P6 0] factor ->  . intconst   { '*' ')' <EOF> }  0, () 1
2: [P7 0] factor ->  . floatconst   { '*' ')' <EOF> }  0, () 2
3: [P8 0] factor ->  . '(' term ')'   { '*' ')' <EOF> }  0, () 3
4: [P9 0] factor ->  . unop factor   { '*' ')' <EOF> }  0, (6 7 ) 4
5: [P10 0] factor ->  . id   { '*' ')' <EOF> }  0, () 5
6: [P11 0] unop ->  . '-'   { id intconst floatconst '-' '(' '*' }  0, () 6
7: [P12 0] unop ->  . '*'   { id intconst floatconst '-' '(' '*' }  0, () 7
  0:   On factor to state 18 with (0 )
  1:   On intconst to state 11 with (1 )
  2:   On floatconst to state 12 with (2 )
  3:   On '(' to state 13 with (3 )
  4:   On unop to state 14 with (4 )
  5:   On id to state 15 with (5 )
  6:   On '-' to state 5 with (6 )
  7:   On '*' to state 6 with (7 )


State 15:
0: [P10 1] factor -> id  .   { '*' ')' <EOF> }  1, () -1
  Reduce item(s): 0 


State 16:
0: [P4 2] term -> term '*'  . factor   { '*' ')' <EOF> }  0, (1 2 3 4 5 ) 0
1: [P6 0] factor ->  . intconst   { '*' ')' <EOF> }  0, () 1
2: [P7 0] factor ->  . floatconst   { '*' ')' <EOF> }  0, () 2
3: [P8 0] factor ->  . '(' term ')'   { '*' ')' <EOF> }  0, () 3
4: [P9 0] factor ->  . unop factor   { '*' ')' <EOF> }  0, (6 7 ) 4
5: [P10 0] factor ->  . id   { '*' ')' <EOF> }  0, () 5
6: [P11 0] unop ->  . '-'   { id intconst floatconst '-' '(' '*' }  0, () 6
7: [P12 0] unop ->  . '*'   { id intconst floatconst '-' '(' '*' }  0, () 7
  0:   On factor to state 19 with (0 )
  1:   On intconst to state 11 with (1 )
  2:   On floatconst to state 12 with (2 )
  3:   On '(' to state 13 with (3 )
  4:   On unop to state 14 with (4 )
  5:   On id to state 15 with (5 )
  6:   On '-' to state 5 with (6 )
  7:   On '*' to state 6 with (7 )


State 17:
0: [P8 2] factor -> '(' term  . ')'   { '*' ')' <EOF> }  0, () 0
1: [P4 1] term -> term  . '*' factor   { '*' ')' }  0, () 1
  0:   On ')' to state 20 with (0 )
  1:   On '*' to state 16 with (1 )


State 18:
0: [P9 2] factor -> unop factor  .   { '*' ')' <EOF> }  1, () -1
  Reduce item(s): 0 


State 19:
0: [P4 3] term -> term '*' factor  .   { '*' ')' <EOF> }  1, () -1
  Reduce item(s): 0 


State 20:
0: [P8 3] factor -> '(' term ')'  .   { '*' ')' <EOF> }  1, () -1
  Reduce item(s): 0 



