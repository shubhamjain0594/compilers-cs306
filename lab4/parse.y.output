[[parse.y (info)] Line 648: 
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: translation_unit ->  function_definition
2: translation_unit ->  translation_unit function_definition
3: function_definition ->  type_specifier #0001 fun_declarator #0002 compound_statement
4: #0001 ->  <empty>
5: #0002 ->  <empty>
6: type_specifier (VOID) ->  VOID
7: type_specifier (INT) ->  INT
8: type_specifier (FLOAT) ->  FLOAT
9: fun_declarator (IDENTIFIER) ->  IDENTIFIER '(' parameter_list ')'
10: fun_declarator (IDENTIFIER) ->  IDENTIFIER '(' ')'
11: parameter_list ->  parameter_declaration
12: parameter_list (',') ->  parameter_list ',' parameter_declaration
13: parameter_declaration ->  type_specifier declarator
14: declarator (IDENTIFIER) ->  IDENTIFIER
15: declarator ('[') ->  declarator '[' constant_expression ']'
16: constant_expression (INT_CONSTANT) ->  INT_CONSTANT
17: constant_expression (FLOAT_CONSTANT) ->  FLOAT_CONSTANT
18: compound_statement ('{') ->  '{' '}'
19: compound_statement ('{') ->  '{' statement_list '}'
20: compound_statement ('{') ->  '{' declaration_list statement_list '}'
21: statement_list ->  statement
22: statement_list ->  statement_list statement
23: statement ('{') ->  '{' statement_list '}'
24: statement ->  selection_statement
25: statement ->  iteration_statement
26: statement ->  assignment_statement
27: statement (RETURN) ->  RETURN expression ';'
28: statement (IDENTIFIER) ->  IDENTIFIER '(' ')' ';'
29: statement (IDENTIFIER) ->  IDENTIFIER '(' expression_list ')' ';'
30: assignment_statement (';') ->  ';'
31: assignment_statement ('=') ->  l_expression '=' expression ';'
32: expression ->  logical_and_expression
33: expression (OR_OP) ->  expression OR_OP logical_and_expression
34: logical_and_expression ->  equality_expression
35: logical_and_expression (AND_OP) ->  logical_and_expression AND_OP equality_expression
36: equality_expression ->  relational_expression
37: equality_expression (EQ_OP) ->  equality_expression EQ_OP relational_expression
38: equality_expression (NE_OP) ->  equality_expression NE_OP relational_expression
39: relational_expression ->  additive_expression
40: relational_expression ('<') ->  relational_expression '<' additive_expression
41: relational_expression ('>') ->  relational_expression '>' additive_expression
42: relational_expression (LE_OP) ->  relational_expression LE_OP additive_expression
43: relational_expression (GE_OP) ->  relational_expression GE_OP additive_expression
44: additive_expression ->  multiplicative_expression
45: additive_expression ('+') ->  additive_expression '+' multiplicative_expression
46: additive_expression ('-') ->  additive_expression '-' multiplicative_expression
47: multiplicative_expression ->  unary_expression
48: multiplicative_expression ('*') ->  multiplicative_expression '*' unary_expression
49: multiplicative_expression ('/') ->  multiplicative_expression '/' unary_expression
50: unary_expression ->  postfix_expression
51: unary_expression ->  unary_operator postfix_expression
52: postfix_expression ->  primary_expression
53: postfix_expression (IDENTIFIER) ->  IDENTIFIER '(' ')'
54: postfix_expression (IDENTIFIER) ->  IDENTIFIER '(' expression_list ')'
55: postfix_expression (INC_OP) ->  l_expression INC_OP
56: primary_expression ->  l_expression
57: primary_expression ('=') ->  l_expression '=' expression
58: primary_expression (INT_CONSTANT) ->  INT_CONSTANT
59: primary_expression (FLOAT_CONSTANT) ->  FLOAT_CONSTANT
60: primary_expression (STRING_LITERAL) ->  STRING_LITERAL
61: primary_expression ('(') ->  '(' expression ')'
62: l_expression (IDENTIFIER) ->  IDENTIFIER
63: l_expression ('[') ->  l_expression '[' expression ']'
64: expression_list ->  expression
65: expression_list (',') ->  expression_list ',' expression
66: unary_operator ('-') ->  '-'
67: unary_operator ('!') ->  '!'
68: selection_statement (IF) ->  IF '(' expression ')' statement ELSE statement
69: iteration_statement (WHILE) ->  WHILE '(' expression ')' statement
70: iteration_statement (FOR) ->  FOR '(' expression ';' expression ';' expression ')' statement
71: declaration_list ->  declaration
72: declaration_list ->  declaration_list declaration
73: declaration (';') ->  type_specifier #0003 declarator_list ';'
74: #0003 ->  <empty>
75: declarator_list ->  declarator
76: declarator_list (',') ->  declarator_list ',' declarator
77: translation_unit_$ ->  translation_unit

[[parse.y (info)] 
Symbolic Terminal tokens:
       error
       EOF
   277: IDENTIFIER
   278: INT_CONSTANT
   279: STRING_LITERAL
   280: FLOAT_CONSTANT
   282: VOID
   283: INT
   284: FLOAT
   286: AND_OP
   287: OR_OP
   288: EQ_OP
   289: NE_OP
   290: LE_OP
   291: GE_OP
   292: IF
   293: ELSE
   294: WHILE
   295: FOR
   296: RETURN
   297: INC_OP
    40: '('
    41: ')'
    44: ','
    91: '['
    93: ']'
   123: '{'
   125: '}'
    59: ';'
    61: '='
    60: '<'
    62: '>'
    43: '+'
    45: '-'
    42: '*'
    47: '/'
    33: '!'

[[parse.y (info)] 
FIRST sets:
   translation_unit: { VOID INT FLOAT }
   function_definition: { VOID INT FLOAT }
   #0001:    { <e> }
   #0002:    { <e> }
   type_specifier: { VOID INT FLOAT }
   fun_declarator: { IDENTIFIER }
   parameter_list: { VOID INT FLOAT }
   parameter_declaration: { VOID INT FLOAT }
   declarator: { IDENTIFIER }
   constant_expression: { INT_CONSTANT FLOAT_CONSTANT }
   compound_statement: { '{' }
   declaration_list: { VOID INT FLOAT }
   statement_list: { IDENTIFIER IF WHILE FOR RETURN '{' ';' }
   statement: { IDENTIFIER IF WHILE FOR RETURN '{' ';' }
   assignment_statement: { IDENTIFIER ';' }
   expression: { '!' IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' '-' }
   logical_and_expression: { '!' IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' '-' }
   equality_expression: { '!' IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' '-' }
   relational_expression: { '!' IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' '-' }
   additive_expression: { '!' IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' '-' }
   multiplicative_expression: { '!' IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' '-' }
   unary_expression: { '!' IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' '-' }
   postfix_expression: { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }
   primary_expression: { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }
   l_expression: { IDENTIFIER }
   expression_list: { '!' IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' '-' }
   unary_operator: { '!' '-' }
   selection_statement: { IF }
   iteration_statement: { WHILE FOR }
   declaration: { VOID INT FLOAT }
   declarator_list: { IDENTIFIER }
   #0003:    { <e> }
   translation_unit_$: { VOID INT FLOAT }

[[parse.y (info)] 
FOLLOW sets:
   translation_unit: { VOID INT FLOAT <EOF> }
   function_definition: { VOID INT FLOAT <EOF> }
   #0001:    { IDENTIFIER }
   #0002:    { '{' }
   type_specifier: { IDENTIFIER }
   fun_declarator: { '{' }
   parameter_list: { ')' ',' }
   parameter_declaration: { ')' ',' }
   declarator: { ')' ',' '[' ';' }
   constant_expression: { ']' }
   compound_statement: { VOID INT FLOAT <EOF> }
   declaration_list: { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }
   statement_list: { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }
   statement: { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }
   assignment_statement: { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }
   expression: { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }
   logical_and_expression: { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }
   equality_expression: { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }
   relational_expression: { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }
   additive_expression: { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }
   multiplicative_expression: { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }
   unary_expression: { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }
   postfix_expression: { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }
   primary_expression: { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }
   l_expression: { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }
   expression_list: { ')' ',' }
   unary_operator: { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }
   selection_statement: { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }
   iteration_statement: { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }
   declaration: { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }
   declarator_list: { ',' ';' }
   #0003:    { IDENTIFIER }
   translation_unit_$: { <EOF> }

[[parse.y (info)] 
Grammar States: 
[[parse.y (info)] 
For each state information like the following is shown for its items:
   0: [P1 1] S -> C  . C   { <EOF> }  0, (1 2 ) 0
which should be read as follows:
   0:          The item's index
   [P1 1]:     The rule (production) number and current dot-position
   S -> C . C: The item (lhs -> Recognized-symbols . symbols-to-recognize)
   { <EOF> }   The item's lookahead (LA) set
   0,          The next state's LA set is not enlarged (1: it is enlarged)
   (1 2)       Item indices of items whose LA sets depend on this item
   0           The next-element (shown below the items) describing the
               action associated with this item (-1 for reducible items)

The Next tables show entries like:
   0: On C to state 5 with (0 )
meaning:
   0:               The Next table's index
   On C to state 5: When C was recognized, continue at state 5
   with (0 )        The item(s) whose dot is shifted at the next state
Indices (like 0:) may be annotated as follows:
   0 (AUTO REMOVED by S/R resolution): On C ...
       in which case a reduction using a production with unspecified
       precedence took priority;
or:
   0 (removed by precedence): On C ...
       in which case a production rule's precedence took priority
Also, reduction item(s) may be listed


State 0:
0: [P77 0] translation_unit_$ ->  . translation_unit   { <EOF> }  0, (1 2 ) 0
1: [P1 0] translation_unit ->  . function_definition   { VOID INT FLOAT <EOF> }  0, (3 ) 1
2: [P2 0] translation_unit ->  . translation_unit function_definition   { VOID INT FLOAT <EOF> }  0, (1 2 ) 0
3: [P3 0] function_definition ->  . type_specifier #0001 fun_declarator #0002 compound_statement   { VOID INT FLOAT <EOF> }  0, (4 5 6 ) 2
4: [P6 0] type_specifier ->  . VOID   { IDENTIFIER }  0, () 3
5: [P7 0] type_specifier ->  . INT   { IDENTIFIER }  0, () 4
6: [P8 0] type_specifier ->  . FLOAT   { IDENTIFIER }  0, () 5
  0:   On translation_unit to state 1 with (0 2 )
  1:   On function_definition to state 2 with (1 )
  2:   On type_specifier to state 3 with (3 )
  3:   On VOID to state 4 with (4 )
  4:   On INT to state 5 with (5 )
  5:   On FLOAT to state 6 with (6 )


State 1:
0: [P77 1] translation_unit_$ -> translation_unit  .   { <EOF> }  1, () -1
1: [P2 1] translation_unit -> translation_unit  . function_definition   { VOID INT FLOAT <EOF> }  0, (2 ) 0
2: [P3 0] function_definition ->  . type_specifier #0001 fun_declarator #0002 compound_statement   { VOID INT FLOAT <EOF> }  0, (3 4 5 ) 1
3: [P6 0] type_specifier ->  . VOID   { IDENTIFIER }  0, () 2
4: [P7 0] type_specifier ->  . INT   { IDENTIFIER }  0, () 3
5: [P8 0] type_specifier ->  . FLOAT   { IDENTIFIER }  0, () 4
  0:   On function_definition to state 7 with (1 )
  1:   On type_specifier to state 3 with (2 )
  2:   On VOID to state 4 with (3 )
  3:   On INT to state 5 with (4 )
  4:   On FLOAT to state 6 with (5 )


State 2:
0: [P1 1] translation_unit -> function_definition  .   { VOID INT FLOAT <EOF> }  1, () -1
  Reduce item(s): 0 


State 3:
0: [P3 1] function_definition -> type_specifier  . #0001 fun_declarator #0002 compound_statement   { VOID INT FLOAT <EOF> }  0, (1 ) 0
1: [P4 0] #0001 ->  .   { IDENTIFIER }  1, () -1
  0:   On #0001 to state 8 with (0 )
  Reduce item(s): 1 


State 4:
0: [P6 1] type_specifier -> VOID  .   { IDENTIFIER }  1, () -1
  Reduce item(s): 0 


State 5:
0: [P7 1] type_specifier -> INT  .   { IDENTIFIER }  1, () -1
  Reduce item(s): 0 


State 6:
0: [P8 1] type_specifier -> FLOAT  .   { IDENTIFIER }  1, () -1
  Reduce item(s): 0 


State 7:
0: [P2 2] translation_unit -> translation_unit function_definition  .   { VOID INT FLOAT <EOF> }  1, () -1
  Reduce item(s): 0 


State 8:
0: [P3 2] function_definition -> type_specifier #0001  . fun_declarator #0002 compound_statement   { VOID INT FLOAT <EOF> }  0, (1 2 ) 0
1: [P9 0] fun_declarator ->  . IDENTIFIER '(' parameter_list ')'   { '{' }  0, () 1
2: [P10 0] fun_declarator ->  . IDENTIFIER '(' ')'   { '{' }  0, () 1
  0:   On fun_declarator to state 9 with (0 )
  1:   On IDENTIFIER to state 10 with (1 2 )


State 9:
0: [P3 3] function_definition -> type_specifier #0001 fun_declarator  . #0002 compound_statement   { VOID INT FLOAT <EOF> }  0, (1 ) 0
1: [P5 0] #0002 ->  .   { '{' }  1, () -1
  0:   On #0002 to state 11 with (0 )
  Reduce item(s): 1 


State 10:
0: [P9 1] fun_declarator -> IDENTIFIER  . '(' parameter_list ')'   { '{' }  0, () 0
1: [P10 1] fun_declarator -> IDENTIFIER  . '(' ')'   { '{' }  0, () 0
  0:   On '(' to state 12 with (0 1 )


State 11:
0: [P3 4] function_definition -> type_specifier #0001 fun_declarator #0002  . compound_statement   { VOID INT FLOAT <EOF> }  0, (1 2 3 ) 0
1: [P18 0] compound_statement ->  . '{' '}'   { VOID INT FLOAT <EOF> }  0, () 1
2: [P19 0] compound_statement ->  . '{' statement_list '}'   { VOID INT FLOAT <EOF> }  0, () 1
3: [P20 0] compound_statement ->  . '{' declaration_list statement_list '}'   { VOID INT FLOAT <EOF> }  0, () 1
  0:   On compound_statement to state 13 with (0 )
  1:   On '{' to state 14 with (1 2 3 )


State 12:
0: [P9 2] fun_declarator -> IDENTIFIER '('  . parameter_list ')'   { '{' }  0, (2 3 ) 0
1: [P10 2] fun_declarator -> IDENTIFIER '('  . ')'   { '{' }  0, () 1
2: [P11 0] parameter_list ->  . parameter_declaration   { ')' ',' }  0, (4 ) 2
3: [P12 0] parameter_list ->  . parameter_list ',' parameter_declaration   { ')' ',' }  0, (2 3 ) 0
4: [P13 0] parameter_declaration ->  . type_specifier declarator   { ')' ',' }  0, (5 6 7 ) 3
5: [P6 0] type_specifier ->  . VOID   { IDENTIFIER }  0, () 4
6: [P7 0] type_specifier ->  . INT   { IDENTIFIER }  0, () 5
7: [P8 0] type_specifier ->  . FLOAT   { IDENTIFIER }  0, () 6
  0:   On parameter_list to state 15 with (0 3 )
  1:   On ')' to state 16 with (1 )
  2:   On parameter_declaration to state 17 with (2 )
  3:   On type_specifier to state 18 with (4 )
  4:   On VOID to state 4 with (5 )
  5:   On INT to state 5 with (6 )
  6:   On FLOAT to state 6 with (7 )


State 13:
0: [P3 5] function_definition -> type_specifier #0001 fun_declarator #0002 compound_statement  .   { VOID INT FLOAT <EOF> }  1, () -1
  Reduce item(s): 0 


State 14:
0: [P18 1] compound_statement -> '{'  . '}'   { VOID INT FLOAT <EOF> }  0, () 0
1: [P19 1] compound_statement -> '{'  . statement_list '}'   { VOID INT FLOAT <EOF> }  0, (3 4 ) 1
2: [P20 1] compound_statement -> '{'  . declaration_list statement_list '}'   { VOID INT FLOAT <EOF> }  0, (5 6 ) 2
3: [P21 0] statement_list ->  . statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (7 8 9 10 11 12 13 ) 3
4: [P22 0] statement_list ->  . statement_list statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (3 4 ) 1
5: [P71 0] declaration_list ->  . declaration   { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }  0, (14 ) 4
6: [P72 0] declaration_list ->  . declaration_list declaration   { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }  0, (5 6 ) 2
7: [P23 0] statement ->  . '{' statement_list '}'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 5
8: [P24 0] statement ->  . selection_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (15 ) 6
9: [P25 0] statement ->  . iteration_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (16 17 ) 7
10: [P26 0] statement ->  . assignment_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (18 19 ) 8
11: [P27 0] statement ->  . RETURN expression ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 9
12: [P28 0] statement ->  . IDENTIFIER '(' ')' ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 10
13: [P29 0] statement ->  . IDENTIFIER '(' expression_list ')' ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 10
14: [P73 0] declaration ->  . type_specifier #0003 declarator_list ';'   { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }  0, (20 21 22 ) 11
15: [P68 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 12
16: [P69 0] iteration_statement ->  . WHILE '(' expression ')' statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 13
17: [P70 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 14
18: [P30 0] assignment_statement ->  . ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 15
19: [P31 0] assignment_statement ->  . l_expression '=' expression ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (23 24 ) 16
20: [P6 0] type_specifier ->  . VOID   { IDENTIFIER }  0, () 17
21: [P7 0] type_specifier ->  . INT   { IDENTIFIER }  0, () 18
22: [P8 0] type_specifier ->  . FLOAT   { IDENTIFIER }  0, () 19
23: [P62 0] l_expression ->  . IDENTIFIER   { '[' '=' }  0, () 10
24: [P63 0] l_expression ->  . l_expression '[' expression ']'   { '[' '=' }  0, (23 24 ) 16
  0:   On '}' to state 19 with (0 )
  1:   On statement_list to state 20 with (1 4 )
  2:   On declaration_list to state 21 with (2 6 )
  3:   On statement to state 22 with (3 )
  4:   On declaration to state 23 with (5 )
  5:   On '{' to state 24 with (7 )
  6:   On selection_statement to state 25 with (8 )
  7:   On iteration_statement to state 26 with (9 )
  8:   On assignment_statement to state 27 with (10 )
  9:   On RETURN to state 28 with (11 )
  10:   On IDENTIFIER to state 29 with (12 13 23 )
  11:   On type_specifier to state 30 with (14 )
  12:   On IF to state 31 with (15 )
  13:   On WHILE to state 32 with (16 )
  14:   On FOR to state 33 with (17 )
  15:   On ';' to state 34 with (18 )
  16:   On l_expression to state 35 with (19 24 )
  17:   On VOID to state 4 with (20 )
  18:   On INT to state 5 with (21 )
  19:   On FLOAT to state 6 with (22 )


State 15:
0: [P9 3] fun_declarator -> IDENTIFIER '(' parameter_list  . ')'   { '{' }  0, () 0
1: [P12 1] parameter_list -> parameter_list  . ',' parameter_declaration   { ')' ',' }  0, () 1
  0:   On ')' to state 36 with (0 )
  1:   On ',' to state 37 with (1 )


State 16:
0: [P10 3] fun_declarator -> IDENTIFIER '(' ')'  .   { '{' }  1, () -1
  Reduce item(s): 0 


State 17:
0: [P11 1] parameter_list -> parameter_declaration  .   { ')' ',' }  1, () -1
  Reduce item(s): 0 


State 18:
0: [P13 1] parameter_declaration -> type_specifier  . declarator   { ')' ',' }  0, (1 2 ) 0
1: [P14 0] declarator ->  . IDENTIFIER   { ')' ',' '[' }  0, () 1
2: [P15 0] declarator ->  . declarator '[' constant_expression ']'   { ')' ',' '[' }  0, (1 2 ) 0
  0:   On declarator to state 38 with (0 2 )
  1:   On IDENTIFIER to state 39 with (1 )


State 19:
0: [P18 2] compound_statement -> '{' '}'  .   { VOID INT FLOAT <EOF> }  1, () -1
  Reduce item(s): 0 


State 20:
0: [P19 2] compound_statement -> '{' statement_list  . '}'   { VOID INT FLOAT <EOF> }  0, () 0
1: [P22 1] statement_list -> statement_list  . statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (2 3 4 5 6 7 8 ) 1
2: [P23 0] statement ->  . '{' statement_list '}'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 2
3: [P24 0] statement ->  . selection_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (9 ) 3
4: [P25 0] statement ->  . iteration_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (10 11 ) 4
5: [P26 0] statement ->  . assignment_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (12 13 ) 5
6: [P27 0] statement ->  . RETURN expression ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 6
7: [P28 0] statement ->  . IDENTIFIER '(' ')' ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 7
8: [P29 0] statement ->  . IDENTIFIER '(' expression_list ')' ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 7
9: [P68 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 8
10: [P69 0] iteration_statement ->  . WHILE '(' expression ')' statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 9
11: [P70 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 10
12: [P30 0] assignment_statement ->  . ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 11
13: [P31 0] assignment_statement ->  . l_expression '=' expression ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (14 15 ) 12
14: [P62 0] l_expression ->  . IDENTIFIER   { '[' '=' }  0, () 7
15: [P63 0] l_expression ->  . l_expression '[' expression ']'   { '[' '=' }  0, (14 15 ) 12
  0:   On '}' to state 40 with (0 )
  1:   On statement to state 41 with (1 )
  2:   On '{' to state 24 with (2 )
  3:   On selection_statement to state 25 with (3 )
  4:   On iteration_statement to state 26 with (4 )
  5:   On assignment_statement to state 27 with (5 )
  6:   On RETURN to state 28 with (6 )
  7:   On IDENTIFIER to state 29 with (7 8 14 )
  8:   On IF to state 31 with (9 )
  9:   On WHILE to state 32 with (10 )
  10:   On FOR to state 33 with (11 )
  11:   On ';' to state 34 with (12 )
  12:   On l_expression to state 35 with (13 15 )


State 21:
0: [P20 2] compound_statement -> '{' declaration_list  . statement_list '}'   { VOID INT FLOAT <EOF> }  0, (2 3 ) 0
1: [P72 1] declaration_list -> declaration_list  . declaration   { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }  0, (4 ) 1
2: [P21 0] statement_list ->  . statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (5 6 7 8 9 10 11 ) 2
3: [P22 0] statement_list ->  . statement_list statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (2 3 ) 0
4: [P73 0] declaration ->  . type_specifier #0003 declarator_list ';'   { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }  0, (12 13 14 ) 3
5: [P23 0] statement ->  . '{' statement_list '}'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 4
6: [P24 0] statement ->  . selection_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (15 ) 5
7: [P25 0] statement ->  . iteration_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (16 17 ) 6
8: [P26 0] statement ->  . assignment_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (18 19 ) 7
9: [P27 0] statement ->  . RETURN expression ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 8
10: [P28 0] statement ->  . IDENTIFIER '(' ')' ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 9
11: [P29 0] statement ->  . IDENTIFIER '(' expression_list ')' ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 9
12: [P6 0] type_specifier ->  . VOID   { IDENTIFIER }  0, () 10
13: [P7 0] type_specifier ->  . INT   { IDENTIFIER }  0, () 11
14: [P8 0] type_specifier ->  . FLOAT   { IDENTIFIER }  0, () 12
15: [P68 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 13
16: [P69 0] iteration_statement ->  . WHILE '(' expression ')' statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 14
17: [P70 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 15
18: [P30 0] assignment_statement ->  . ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 16
19: [P31 0] assignment_statement ->  . l_expression '=' expression ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (20 21 ) 17
20: [P62 0] l_expression ->  . IDENTIFIER   { '[' '=' }  0, () 9
21: [P63 0] l_expression ->  . l_expression '[' expression ']'   { '[' '=' }  0, (20 21 ) 17
  0:   On statement_list to state 42 with (0 3 )
  1:   On declaration to state 43 with (1 )
  2:   On statement to state 22 with (2 )
  3:   On type_specifier to state 30 with (4 )
  4:   On '{' to state 24 with (5 )
  5:   On selection_statement to state 25 with (6 )
  6:   On iteration_statement to state 26 with (7 )
  7:   On assignment_statement to state 27 with (8 )
  8:   On RETURN to state 28 with (9 )
  9:   On IDENTIFIER to state 29 with (10 11 20 )
  10:   On VOID to state 4 with (12 )
  11:   On INT to state 5 with (13 )
  12:   On FLOAT to state 6 with (14 )
  13:   On IF to state 31 with (15 )
  14:   On WHILE to state 32 with (16 )
  15:   On FOR to state 33 with (17 )
  16:   On ';' to state 34 with (18 )
  17:   On l_expression to state 35 with (19 21 )


State 22:
0: [P21 1] statement_list -> statement  .   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 23:
0: [P71 1] declaration_list -> declaration  .   { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }  1, () -1
  Reduce item(s): 0 


State 24:
0: [P23 1] statement -> '{'  . statement_list '}'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (1 2 ) 0
1: [P21 0] statement_list ->  . statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (3 4 5 6 7 8 9 ) 1
2: [P22 0] statement_list ->  . statement_list statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (1 2 ) 0
3: [P23 0] statement ->  . '{' statement_list '}'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 2
4: [P24 0] statement ->  . selection_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (10 ) 3
5: [P25 0] statement ->  . iteration_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (11 12 ) 4
6: [P26 0] statement ->  . assignment_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (13 14 ) 5
7: [P27 0] statement ->  . RETURN expression ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 6
8: [P28 0] statement ->  . IDENTIFIER '(' ')' ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 7
9: [P29 0] statement ->  . IDENTIFIER '(' expression_list ')' ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 7
10: [P68 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 8
11: [P69 0] iteration_statement ->  . WHILE '(' expression ')' statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 9
12: [P70 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 10
13: [P30 0] assignment_statement ->  . ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 11
14: [P31 0] assignment_statement ->  . l_expression '=' expression ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (15 16 ) 12
15: [P62 0] l_expression ->  . IDENTIFIER   { '[' '=' }  0, () 7
16: [P63 0] l_expression ->  . l_expression '[' expression ']'   { '[' '=' }  0, (15 16 ) 12
  0:   On statement_list to state 44 with (0 2 )
  1:   On statement to state 22 with (1 )
  2:   On '{' to state 24 with (3 )
  3:   On selection_statement to state 25 with (4 )
  4:   On iteration_statement to state 26 with (5 )
  5:   On assignment_statement to state 27 with (6 )
  6:   On RETURN to state 28 with (7 )
  7:   On IDENTIFIER to state 29 with (8 9 15 )
  8:   On IF to state 31 with (10 )
  9:   On WHILE to state 32 with (11 )
  10:   On FOR to state 33 with (12 )
  11:   On ';' to state 34 with (13 )
  12:   On l_expression to state 35 with (14 16 )


State 25:
0: [P24 1] statement -> selection_statement  .   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 26:
0: [P25 1] statement -> iteration_statement  .   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 27:
0: [P26 1] statement -> assignment_statement  .   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 28:
0: [P27 1] statement -> RETURN  . expression ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (1 2 ) 0
1: [P32 0] expression ->  . logical_and_expression   { OR_OP ';' }  0, (3 4 ) 1
2: [P33 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ';' }  0, (1 2 ) 0
3: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP ';' }  0, (5 6 7 ) 2
4: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP ';' }  0, (3 4 ) 1
5: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP ';' }  0, (8 9 10 11 12 ) 3
6: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ';' }  0, (5 6 7 ) 2
7: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ';' }  0, (5 6 7 ) 2
8: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (13 14 15 ) 4
9: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
10: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
11: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
12: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
13: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' }  0, (16 17 18 ) 5
14: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' }  0, (13 14 15 ) 4
15: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' }  0, (13 14 15 ) 4
16: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (19 20 ) 6
17: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
18: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
19: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 23 24 ) 7
20: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (25 26 ) 8
21: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (27 28 29 30 31 32 ) 9
22: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 10
23: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 10
24: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
25: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 12
26: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 13
27: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
28: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
29: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 14
30: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 15
31: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 16
32: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 17
33: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP '[' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 10
34: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP '[' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
  0:   On expression to state 45 with (0 2 )
  1:   On logical_and_expression to state 46 with (1 4 )
  2:   On equality_expression to state 47 with (3 6 7 )
  3:   On relational_expression to state 48 with (5 9 10 11 12 )
  4:   On additive_expression to state 49 with (8 14 15 )
  5:   On multiplicative_expression to state 50 with (13 17 18 )
  6:   On unary_expression to state 51 with (16 )
  7:   On postfix_expression to state 52 with (19 )
  8:   On unary_operator to state 53 with (20 )
  9:   On primary_expression to state 54 with (21 )
  10:   On IDENTIFIER to state 55 with (22 23 33 )
  11:   On l_expression to state 56 with (24 27 28 34 )
  12:   On '-' to state 57 with (25 )
  13:   On '!' to state 58 with (26 )
  14:   On INT_CONSTANT to state 59 with (29 )
  15:   On FLOAT_CONSTANT to state 60 with (30 )
  16:   On STRING_LITERAL to state 61 with (31 )
  17:   On '(' to state 62 with (32 )


State 29:
0: [P28 1] statement -> IDENTIFIER  . '(' ')' ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
1: [P29 1] statement -> IDENTIFIER  . '(' expression_list ')' ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
2: [P62 1] l_expression -> IDENTIFIER  .   { '[' '=' }  1, () -1
  0:   On '(' to state 63 with (0 1 )
  Reduce item(s): 2 


State 30:
0: [P73 1] declaration -> type_specifier  . #0003 declarator_list ';'   { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }  0, (1 ) 0
1: [P74 0] #0003 ->  .   { IDENTIFIER }  1, () -1
  0:   On #0003 to state 64 with (0 )
  Reduce item(s): 1 


State 31:
0: [P68 1] selection_statement -> IF  . '(' expression ')' statement ELSE statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
  0:   On '(' to state 65 with (0 )


State 32:
0: [P69 1] iteration_statement -> WHILE  . '(' expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
  0:   On '(' to state 66 with (0 )


State 33:
0: [P70 1] iteration_statement -> FOR  . '(' expression ';' expression ';' expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
  0:   On '(' to state 67 with (0 )


State 34:
0: [P30 1] assignment_statement -> ';'  .   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 35:
0: [P31 1] assignment_statement -> l_expression  . '=' expression ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
1: [P63 1] l_expression -> l_expression  . '[' expression ']'   { '[' '=' }  0, () 1
  0:   On '=' to state 68 with (0 )
  1:   On '[' to state 69 with (1 )


State 36:
0: [P9 4] fun_declarator -> IDENTIFIER '(' parameter_list ')'  .   { '{' }  1, () -1
  Reduce item(s): 0 


State 37:
0: [P12 2] parameter_list -> parameter_list ','  . parameter_declaration   { ')' ',' }  0, (1 ) 0
1: [P13 0] parameter_declaration ->  . type_specifier declarator   { ')' ',' }  0, (2 3 4 ) 1
2: [P6 0] type_specifier ->  . VOID   { IDENTIFIER }  0, () 2
3: [P7 0] type_specifier ->  . INT   { IDENTIFIER }  0, () 3
4: [P8 0] type_specifier ->  . FLOAT   { IDENTIFIER }  0, () 4
  0:   On parameter_declaration to state 70 with (0 )
  1:   On type_specifier to state 18 with (1 )
  2:   On VOID to state 4 with (2 )
  3:   On INT to state 5 with (3 )
  4:   On FLOAT to state 6 with (4 )


State 38:
0: [P13 2] parameter_declaration -> type_specifier declarator  .   { ')' ',' }  1, () -1
1: [P15 1] declarator -> declarator  . '[' constant_expression ']'   { ')' ',' '[' }  0, () 0
  0:   On '[' to state 71 with (1 )
  Reduce item(s): 0 


State 39:
0: [P14 1] declarator -> IDENTIFIER  .   { ')' ',' '[' ';' }  1, () -1
  Reduce item(s): 0 


State 40:
0: [P19 3] compound_statement -> '{' statement_list '}'  .   { VOID INT FLOAT <EOF> }  1, () -1
  Reduce item(s): 0 


State 41:
0: [P22 2] statement_list -> statement_list statement  .   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 42:
0: [P20 3] compound_statement -> '{' declaration_list statement_list  . '}'   { VOID INT FLOAT <EOF> }  0, () 0
1: [P22 1] statement_list -> statement_list  . statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (2 3 4 5 6 7 8 ) 1
2: [P23 0] statement ->  . '{' statement_list '}'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 2
3: [P24 0] statement ->  . selection_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (9 ) 3
4: [P25 0] statement ->  . iteration_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (10 11 ) 4
5: [P26 0] statement ->  . assignment_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (12 13 ) 5
6: [P27 0] statement ->  . RETURN expression ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 6
7: [P28 0] statement ->  . IDENTIFIER '(' ')' ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 7
8: [P29 0] statement ->  . IDENTIFIER '(' expression_list ')' ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 7
9: [P68 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 8
10: [P69 0] iteration_statement ->  . WHILE '(' expression ')' statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 9
11: [P70 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 10
12: [P30 0] assignment_statement ->  . ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 11
13: [P31 0] assignment_statement ->  . l_expression '=' expression ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (14 15 ) 12
14: [P62 0] l_expression ->  . IDENTIFIER   { '[' '=' }  0, () 7
15: [P63 0] l_expression ->  . l_expression '[' expression ']'   { '[' '=' }  0, (14 15 ) 12
  0:   On '}' to state 72 with (0 )
  1:   On statement to state 41 with (1 )
  2:   On '{' to state 24 with (2 )
  3:   On selection_statement to state 25 with (3 )
  4:   On iteration_statement to state 26 with (4 )
  5:   On assignment_statement to state 27 with (5 )
  6:   On RETURN to state 28 with (6 )
  7:   On IDENTIFIER to state 29 with (7 8 14 )
  8:   On IF to state 31 with (9 )
  9:   On WHILE to state 32 with (10 )
  10:   On FOR to state 33 with (11 )
  11:   On ';' to state 34 with (12 )
  12:   On l_expression to state 35 with (13 15 )


State 43:
0: [P72 2] declaration_list -> declaration_list declaration  .   { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }  1, () -1
  Reduce item(s): 0 


State 44:
0: [P23 2] statement -> '{' statement_list  . '}'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
1: [P22 1] statement_list -> statement_list  . statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (2 3 4 5 6 7 8 ) 1
2: [P23 0] statement ->  . '{' statement_list '}'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 2
3: [P24 0] statement ->  . selection_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (9 ) 3
4: [P25 0] statement ->  . iteration_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (10 11 ) 4
5: [P26 0] statement ->  . assignment_statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (12 13 ) 5
6: [P27 0] statement ->  . RETURN expression ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 6
7: [P28 0] statement ->  . IDENTIFIER '(' ')' ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 7
8: [P29 0] statement ->  . IDENTIFIER '(' expression_list ')' ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 7
9: [P68 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 8
10: [P69 0] iteration_statement ->  . WHILE '(' expression ')' statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 9
11: [P70 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 10
12: [P30 0] assignment_statement ->  . ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, () 11
13: [P31 0] assignment_statement ->  . l_expression '=' expression ';'   { IDENTIFIER IF WHILE FOR RETURN '{' '}' ';' }  0, (14 15 ) 12
14: [P62 0] l_expression ->  . IDENTIFIER   { '[' '=' }  0, () 7
15: [P63 0] l_expression ->  . l_expression '[' expression ']'   { '[' '=' }  0, (14 15 ) 12
  0:   On '}' to state 73 with (0 )
  1:   On statement to state 41 with (1 )
  2:   On '{' to state 24 with (2 )
  3:   On selection_statement to state 25 with (3 )
  4:   On iteration_statement to state 26 with (4 )
  5:   On assignment_statement to state 27 with (5 )
  6:   On RETURN to state 28 with (6 )
  7:   On IDENTIFIER to state 29 with (7 8 14 )
  8:   On IF to state 31 with (9 )
  9:   On WHILE to state 32 with (10 )
  10:   On FOR to state 33 with (11 )
  11:   On ';' to state 34 with (12 )
  12:   On l_expression to state 35 with (13 15 )


State 45:
0: [P27 2] statement -> RETURN expression  . ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
1: [P33 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ';' }  0, () 1
  0:   On ';' to state 74 with (0 )
  1:   On OR_OP to state 75 with (1 )


State 46:
0: [P32 1] expression -> logical_and_expression  .   { OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
1: [P35 1] logical_and_expression -> logical_and_expression  . AND_OP equality_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
  0:   On AND_OP to state 76 with (1 )
  Reduce item(s): 0 
Solved SR CONFLICT on AND_OP:
	shift to state 76, removed AND_OP from LA-set of rule 32)


State 47:
0: [P34 1] logical_and_expression -> equality_expression  .   { AND_OP OR_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
1: [P37 1] equality_expression -> equality_expression  . EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P38 1] equality_expression -> equality_expression  . NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
  0:   On EQ_OP to state 77 with (1 )
  1:   On NE_OP to state 78 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on EQ_OP:
	shift to state 77, removed EQ_OP from LA-set of rule 34)
Solved SR CONFLICT on NE_OP:
	shift to state 78, removed NE_OP from LA-set of rule 34)


State 48:
0: [P36 1] equality_expression -> relational_expression  .   { AND_OP OR_OP EQ_OP NE_OP ')' ',' ']' ';' '+' '-' '*' '/' }  1, () -1
1: [P40 1] relational_expression -> relational_expression  . '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P41 1] relational_expression -> relational_expression  . '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
3: [P42 1] relational_expression -> relational_expression  . LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 2
4: [P43 1] relational_expression -> relational_expression  . GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 3
  0:   On '<' to state 79 with (1 )
  1:   On '>' to state 80 with (2 )
  2:   On LE_OP to state 81 with (3 )
  3:   On GE_OP to state 82 with (4 )
  Reduce item(s): 0 
Solved SR CONFLICT on '<':
	shift to state 79, removed '<' from LA-set of rule 36)
Solved SR CONFLICT on '>':
	shift to state 80, removed '>' from LA-set of rule 36)
Solved SR CONFLICT on LE_OP:
	shift to state 81, removed LE_OP from LA-set of rule 36)
Solved SR CONFLICT on GE_OP:
	shift to state 82, removed GE_OP from LA-set of rule 36)


State 49:
0: [P39 1] relational_expression -> additive_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '*' '/' }  1, () -1
1: [P45 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P46 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
  0:   On '+' to state 83 with (1 )
  1:   On '-' to state 84 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '+':
	shift to state 83, removed '+' from LA-set of rule 39)
Solved SR CONFLICT on '-':
	shift to state 84, removed '-' from LA-set of rule 39)


State 50:
0: [P44 1] additive_expression -> multiplicative_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' }  1, () -1
1: [P48 1] multiplicative_expression -> multiplicative_expression  . '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P49 1] multiplicative_expression -> multiplicative_expression  . '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
  0:   On '*' to state 85 with (1 )
  1:   On '/' to state 86 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '*':
	shift to state 85, removed '*' from LA-set of rule 44)
Solved SR CONFLICT on '/':
	shift to state 86, removed '/' from LA-set of rule 44)


State 51:
0: [P47 1] multiplicative_expression -> unary_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 52:
0: [P50 1] unary_expression -> postfix_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 53:
0: [P51 1] unary_expression -> unary_operator  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 4 ) 0
1: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (5 6 7 8 9 10 ) 1
2: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 2
3: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 2
4: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (11 12 ) 3
5: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (11 12 ) 3
6: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (11 12 ) 3
7: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 4
8: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 5
9: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 6
10: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 7
11: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 2
12: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (11 12 ) 3
  0:   On postfix_expression to state 87 with (0 )
  1:   On primary_expression to state 54 with (1 )
  2:   On IDENTIFIER to state 55 with (2 3 11 )
  3:   On l_expression to state 56 with (4 5 6 12 )
  4:   On INT_CONSTANT to state 59 with (7 )
  5:   On FLOAT_CONSTANT to state 60 with (8 )
  6:   On STRING_LITERAL to state 61 with (9 )
  7:   On '(' to state 62 with (10 )


State 54:
0: [P52 1] postfix_expression -> primary_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 55:
0: [P53 1] postfix_expression -> IDENTIFIER  . '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
1: [P54 1] postfix_expression -> IDENTIFIER  . '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P62 1] l_expression -> IDENTIFIER  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  1, () -1
  0:   On '(' to state 88 with (0 1 )
  Reduce item(s): 2 


State 56:
0: [P55 1] postfix_expression -> l_expression  . INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
1: [P56 1] primary_expression -> l_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
2: [P57 1] primary_expression -> l_expression  . '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
3: [P63 1] l_expression -> l_expression  . '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 2
  0:   On INC_OP to state 89 with (0 )
  1:   On '=' to state 90 with (2 )
  2:   On '[' to state 69 with (3 )
  Reduce item(s): 1 


State 57:
0: [P66 1] unary_operator -> '-'  .   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  1, () -1
  Reduce item(s): 0 


State 58:
0: [P67 1] unary_operator -> '!'  .   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  1, () -1
  Reduce item(s): 0 


State 59:
0: [P58 1] primary_expression -> INT_CONSTANT  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 60:
0: [P59 1] primary_expression -> FLOAT_CONSTANT  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 61:
0: [P60 1] primary_expression -> STRING_LITERAL  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 62:
0: [P61 1] primary_expression -> '('  . expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 ) 0
1: [P32 0] expression ->  . logical_and_expression   { OR_OP ')' }  0, (3 4 ) 1
2: [P33 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' }  0, (1 2 ) 0
3: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP ')' }  0, (5 6 7 ) 2
4: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP ')' }  0, (3 4 ) 1
5: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' }  0, (8 9 10 11 12 ) 3
6: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' }  0, (5 6 7 ) 2
7: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' }  0, (5 6 7 ) 2
8: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (13 14 15 ) 4
9: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
10: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
11: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
12: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
13: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' }  0, (16 17 18 ) 5
14: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' }  0, (13 14 15 ) 4
15: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' }  0, (13 14 15 ) 4
16: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (19 20 ) 6
17: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
18: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
19: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (21 22 23 24 ) 7
20: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (25 26 ) 8
21: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (27 28 29 30 31 32 ) 9
22: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 10
23: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 10
24: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
25: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 12
26: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 13
27: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
28: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
29: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 14
30: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 15
31: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 16
32: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 17
33: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' '[' '=' '<' '>' '+' '-' '*' '/' }  0, () 10
34: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' '[' '=' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
  0:   On expression to state 91 with (0 2 )
  1:   On logical_and_expression to state 46 with (1 4 )
  2:   On equality_expression to state 47 with (3 6 7 )
  3:   On relational_expression to state 48 with (5 9 10 11 12 )
  4:   On additive_expression to state 49 with (8 14 15 )
  5:   On multiplicative_expression to state 50 with (13 17 18 )
  6:   On unary_expression to state 51 with (16 )
  7:   On postfix_expression to state 52 with (19 )
  8:   On unary_operator to state 53 with (20 )
  9:   On primary_expression to state 54 with (21 )
  10:   On IDENTIFIER to state 55 with (22 23 33 )
  11:   On l_expression to state 56 with (24 27 28 34 )
  12:   On '-' to state 57 with (25 )
  13:   On '!' to state 58 with (26 )
  14:   On INT_CONSTANT to state 59 with (29 )
  15:   On FLOAT_CONSTANT to state 60 with (30 )
  16:   On STRING_LITERAL to state 61 with (31 )
  17:   On '(' to state 62 with (32 )


State 63:
0: [P28 2] statement -> IDENTIFIER '('  . ')' ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
1: [P29 2] statement -> IDENTIFIER '('  . expression_list ')' ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (2 3 ) 1
2: [P64 0] expression_list ->  . expression   { ')' ',' }  0, (4 5 ) 2
3: [P65 0] expression_list ->  . expression_list ',' expression   { ')' ',' }  0, (2 3 ) 1
4: [P32 0] expression ->  . logical_and_expression   { OR_OP ')' ',' }  0, (6 7 ) 3
5: [P33 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' ',' }  0, (4 5 ) 2
6: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP ')' ',' }  0, (8 9 10 ) 4
7: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP ')' ',' }  0, (6 7 ) 3
8: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' ',' }  0, (11 12 13 14 15 ) 5
9: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' ',' }  0, (8 9 10 ) 4
10: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' ',' }  0, (8 9 10 ) 4
11: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (16 17 18 ) 6
12: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (11 12 13 14 15 ) 5
13: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (11 12 13 14 15 ) 5
14: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (11 12 13 14 15 ) 5
15: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (11 12 13 14 15 ) 5
16: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' }  0, (19 20 21 ) 7
17: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' }  0, (16 17 18 ) 6
18: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' }  0, (16 17 18 ) 6
19: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (22 23 ) 8
20: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (19 20 21 ) 7
21: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (19 20 21 ) 7
22: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (24 25 26 27 ) 9
23: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (28 29 ) 10
24: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (30 31 32 33 34 35 ) 11
25: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 12
26: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 12
27: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (36 37 ) 13
28: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 14
29: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 15
30: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (36 37 ) 13
31: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (36 37 ) 13
32: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 16
33: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 17
34: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 18
35: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 19
36: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' '=' '<' '>' '+' '-' '*' '/' }  0, () 12
37: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' '=' '<' '>' '+' '-' '*' '/' }  0, (36 37 ) 13
  0:   On ')' to state 92 with (0 )
  1:   On expression_list to state 93 with (1 3 )
  2:   On expression to state 94 with (2 5 )
  3:   On logical_and_expression to state 46 with (4 7 )
  4:   On equality_expression to state 47 with (6 9 10 )
  5:   On relational_expression to state 48 with (8 12 13 14 15 )
  6:   On additive_expression to state 49 with (11 17 18 )
  7:   On multiplicative_expression to state 50 with (16 20 21 )
  8:   On unary_expression to state 51 with (19 )
  9:   On postfix_expression to state 52 with (22 )
  10:   On unary_operator to state 53 with (23 )
  11:   On primary_expression to state 54 with (24 )
  12:   On IDENTIFIER to state 55 with (25 26 36 )
  13:   On l_expression to state 56 with (27 30 31 37 )
  14:   On '-' to state 57 with (28 )
  15:   On '!' to state 58 with (29 )
  16:   On INT_CONSTANT to state 59 with (32 )
  17:   On FLOAT_CONSTANT to state 60 with (33 )
  18:   On STRING_LITERAL to state 61 with (34 )
  19:   On '(' to state 62 with (35 )


State 64:
0: [P73 2] declaration -> type_specifier #0003  . declarator_list ';'   { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }  0, (1 2 ) 0
1: [P75 0] declarator_list ->  . declarator   { ',' ';' }  0, (3 4 ) 1
2: [P76 0] declarator_list ->  . declarator_list ',' declarator   { ',' ';' }  0, (1 2 ) 0
3: [P14 0] declarator ->  . IDENTIFIER   { ',' '[' ';' }  0, () 2
4: [P15 0] declarator ->  . declarator '[' constant_expression ']'   { ',' '[' ';' }  0, (3 4 ) 1
  0:   On declarator_list to state 95 with (0 2 )
  1:   On declarator to state 96 with (1 4 )
  2:   On IDENTIFIER to state 39 with (3 )


State 65:
0: [P68 2] selection_statement -> IF '('  . expression ')' statement ELSE statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (1 2 ) 0
1: [P32 0] expression ->  . logical_and_expression   { OR_OP ')' }  0, (3 4 ) 1
2: [P33 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' }  0, (1 2 ) 0
3: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP ')' }  0, (5 6 7 ) 2
4: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP ')' }  0, (3 4 ) 1
5: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' }  0, (8 9 10 11 12 ) 3
6: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' }  0, (5 6 7 ) 2
7: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' }  0, (5 6 7 ) 2
8: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (13 14 15 ) 4
9: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
10: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
11: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
12: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
13: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' }  0, (16 17 18 ) 5
14: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' }  0, (13 14 15 ) 4
15: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' }  0, (13 14 15 ) 4
16: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (19 20 ) 6
17: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
18: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
19: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (21 22 23 24 ) 7
20: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (25 26 ) 8
21: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (27 28 29 30 31 32 ) 9
22: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 10
23: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 10
24: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
25: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 12
26: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 13
27: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
28: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
29: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 14
30: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 15
31: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 16
32: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 17
33: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' '[' '=' '<' '>' '+' '-' '*' '/' }  0, () 10
34: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' '[' '=' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
  0:   On expression to state 97 with (0 2 )
  1:   On logical_and_expression to state 46 with (1 4 )
  2:   On equality_expression to state 47 with (3 6 7 )
  3:   On relational_expression to state 48 with (5 9 10 11 12 )
  4:   On additive_expression to state 49 with (8 14 15 )
  5:   On multiplicative_expression to state 50 with (13 17 18 )
  6:   On unary_expression to state 51 with (16 )
  7:   On postfix_expression to state 52 with (19 )
  8:   On unary_operator to state 53 with (20 )
  9:   On primary_expression to state 54 with (21 )
  10:   On IDENTIFIER to state 55 with (22 23 33 )
  11:   On l_expression to state 56 with (24 27 28 34 )
  12:   On '-' to state 57 with (25 )
  13:   On '!' to state 58 with (26 )
  14:   On INT_CONSTANT to state 59 with (29 )
  15:   On FLOAT_CONSTANT to state 60 with (30 )
  16:   On STRING_LITERAL to state 61 with (31 )
  17:   On '(' to state 62 with (32 )


State 66:
0: [P69 2] iteration_statement -> WHILE '('  . expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (1 2 ) 0
1: [P32 0] expression ->  . logical_and_expression   { OR_OP ')' }  0, (3 4 ) 1
2: [P33 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' }  0, (1 2 ) 0
3: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP ')' }  0, (5 6 7 ) 2
4: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP ')' }  0, (3 4 ) 1
5: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' }  0, (8 9 10 11 12 ) 3
6: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' }  0, (5 6 7 ) 2
7: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' }  0, (5 6 7 ) 2
8: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (13 14 15 ) 4
9: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
10: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
11: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
12: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
13: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' }  0, (16 17 18 ) 5
14: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' }  0, (13 14 15 ) 4
15: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' }  0, (13 14 15 ) 4
16: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (19 20 ) 6
17: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
18: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
19: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (21 22 23 24 ) 7
20: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (25 26 ) 8
21: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (27 28 29 30 31 32 ) 9
22: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 10
23: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 10
24: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
25: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 12
26: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 13
27: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
28: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
29: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 14
30: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 15
31: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 16
32: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 17
33: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' '[' '=' '<' '>' '+' '-' '*' '/' }  0, () 10
34: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' '[' '=' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
  0:   On expression to state 98 with (0 2 )
  1:   On logical_and_expression to state 46 with (1 4 )
  2:   On equality_expression to state 47 with (3 6 7 )
  3:   On relational_expression to state 48 with (5 9 10 11 12 )
  4:   On additive_expression to state 49 with (8 14 15 )
  5:   On multiplicative_expression to state 50 with (13 17 18 )
  6:   On unary_expression to state 51 with (16 )
  7:   On postfix_expression to state 52 with (19 )
  8:   On unary_operator to state 53 with (20 )
  9:   On primary_expression to state 54 with (21 )
  10:   On IDENTIFIER to state 55 with (22 23 33 )
  11:   On l_expression to state 56 with (24 27 28 34 )
  12:   On '-' to state 57 with (25 )
  13:   On '!' to state 58 with (26 )
  14:   On INT_CONSTANT to state 59 with (29 )
  15:   On FLOAT_CONSTANT to state 60 with (30 )
  16:   On STRING_LITERAL to state 61 with (31 )
  17:   On '(' to state 62 with (32 )


State 67:
0: [P70 2] iteration_statement -> FOR '('  . expression ';' expression ';' expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (1 2 ) 0
1: [P32 0] expression ->  . logical_and_expression   { OR_OP ';' }  0, (3 4 ) 1
2: [P33 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ';' }  0, (1 2 ) 0
3: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP ';' }  0, (5 6 7 ) 2
4: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP ';' }  0, (3 4 ) 1
5: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP ';' }  0, (8 9 10 11 12 ) 3
6: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ';' }  0, (5 6 7 ) 2
7: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ';' }  0, (5 6 7 ) 2
8: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (13 14 15 ) 4
9: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
10: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
11: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
12: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
13: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' }  0, (16 17 18 ) 5
14: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' }  0, (13 14 15 ) 4
15: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' }  0, (13 14 15 ) 4
16: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (19 20 ) 6
17: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
18: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
19: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 23 24 ) 7
20: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (25 26 ) 8
21: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (27 28 29 30 31 32 ) 9
22: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 10
23: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 10
24: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
25: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 12
26: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 13
27: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
28: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
29: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 14
30: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 15
31: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 16
32: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 17
33: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP '[' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 10
34: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP '[' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
  0:   On expression to state 99 with (0 2 )
  1:   On logical_and_expression to state 46 with (1 4 )
  2:   On equality_expression to state 47 with (3 6 7 )
  3:   On relational_expression to state 48 with (5 9 10 11 12 )
  4:   On additive_expression to state 49 with (8 14 15 )
  5:   On multiplicative_expression to state 50 with (13 17 18 )
  6:   On unary_expression to state 51 with (16 )
  7:   On postfix_expression to state 52 with (19 )
  8:   On unary_operator to state 53 with (20 )
  9:   On primary_expression to state 54 with (21 )
  10:   On IDENTIFIER to state 55 with (22 23 33 )
  11:   On l_expression to state 56 with (24 27 28 34 )
  12:   On '-' to state 57 with (25 )
  13:   On '!' to state 58 with (26 )
  14:   On INT_CONSTANT to state 59 with (29 )
  15:   On FLOAT_CONSTANT to state 60 with (30 )
  16:   On STRING_LITERAL to state 61 with (31 )
  17:   On '(' to state 62 with (32 )


State 68:
0: [P31 2] assignment_statement -> l_expression '='  . expression ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (1 2 ) 0
1: [P32 0] expression ->  . logical_and_expression   { OR_OP ';' }  0, (3 4 ) 1
2: [P33 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ';' }  0, (1 2 ) 0
3: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP ';' }  0, (5 6 7 ) 2
4: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP ';' }  0, (3 4 ) 1
5: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP ';' }  0, (8 9 10 11 12 ) 3
6: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ';' }  0, (5 6 7 ) 2
7: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ';' }  0, (5 6 7 ) 2
8: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (13 14 15 ) 4
9: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
10: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
11: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
12: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
13: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' }  0, (16 17 18 ) 5
14: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' }  0, (13 14 15 ) 4
15: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' }  0, (13 14 15 ) 4
16: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (19 20 ) 6
17: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
18: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
19: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 23 24 ) 7
20: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (25 26 ) 8
21: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (27 28 29 30 31 32 ) 9
22: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 10
23: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 10
24: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
25: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 12
26: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 13
27: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
28: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
29: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 14
30: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 15
31: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 16
32: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 17
33: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP '[' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 10
34: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP '[' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
  0:   On expression to state 100 with (0 2 )
  1:   On logical_and_expression to state 46 with (1 4 )
  2:   On equality_expression to state 47 with (3 6 7 )
  3:   On relational_expression to state 48 with (5 9 10 11 12 )
  4:   On additive_expression to state 49 with (8 14 15 )
  5:   On multiplicative_expression to state 50 with (13 17 18 )
  6:   On unary_expression to state 51 with (16 )
  7:   On postfix_expression to state 52 with (19 )
  8:   On unary_operator to state 53 with (20 )
  9:   On primary_expression to state 54 with (21 )
  10:   On IDENTIFIER to state 55 with (22 23 33 )
  11:   On l_expression to state 56 with (24 27 28 34 )
  12:   On '-' to state 57 with (25 )
  13:   On '!' to state 58 with (26 )
  14:   On INT_CONSTANT to state 59 with (29 )
  15:   On FLOAT_CONSTANT to state 60 with (30 )
  16:   On STRING_LITERAL to state 61 with (31 )
  17:   On '(' to state 62 with (32 )


State 69:
0: [P63 2] l_expression -> l_expression '['  . expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (1 2 ) 0
1: [P32 0] expression ->  . logical_and_expression   { OR_OP ']' }  0, (3 4 ) 1
2: [P33 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ']' }  0, (1 2 ) 0
3: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP ']' }  0, (5 6 7 ) 2
4: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP ']' }  0, (3 4 ) 1
5: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP ']' }  0, (8 9 10 11 12 ) 3
6: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ']' }  0, (5 6 7 ) 2
7: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ']' }  0, (5 6 7 ) 2
8: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' }  0, (13 14 15 ) 4
9: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' }  0, (8 9 10 11 12 ) 3
10: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' }  0, (8 9 10 11 12 ) 3
11: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' }  0, (8 9 10 11 12 ) 3
12: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' }  0, (8 9 10 11 12 ) 3
13: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' }  0, (16 17 18 ) 5
14: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' }  0, (13 14 15 ) 4
15: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' }  0, (13 14 15 ) 4
16: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, (19 20 ) 6
17: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
18: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
19: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, (21 22 23 24 ) 7
20: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, (25 26 ) 8
21: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, (27 28 29 30 31 32 ) 9
22: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, () 10
23: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, () 10
24: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
25: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 12
26: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 13
27: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
28: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
29: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, () 14
30: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, () 15
31: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, () 16
32: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ']' '<' '>' '+' '-' '*' '/' }  0, () 17
33: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP '[' ']' '=' '<' '>' '+' '-' '*' '/' }  0, () 10
34: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP '[' ']' '=' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
  0:   On expression to state 101 with (0 2 )
  1:   On logical_and_expression to state 46 with (1 4 )
  2:   On equality_expression to state 47 with (3 6 7 )
  3:   On relational_expression to state 48 with (5 9 10 11 12 )
  4:   On additive_expression to state 49 with (8 14 15 )
  5:   On multiplicative_expression to state 50 with (13 17 18 )
  6:   On unary_expression to state 51 with (16 )
  7:   On postfix_expression to state 52 with (19 )
  8:   On unary_operator to state 53 with (20 )
  9:   On primary_expression to state 54 with (21 )
  10:   On IDENTIFIER to state 55 with (22 23 33 )
  11:   On l_expression to state 56 with (24 27 28 34 )
  12:   On '-' to state 57 with (25 )
  13:   On '!' to state 58 with (26 )
  14:   On INT_CONSTANT to state 59 with (29 )
  15:   On FLOAT_CONSTANT to state 60 with (30 )
  16:   On STRING_LITERAL to state 61 with (31 )
  17:   On '(' to state 62 with (32 )


State 70:
0: [P12 3] parameter_list -> parameter_list ',' parameter_declaration  .   { ')' ',' }  1, () -1
  Reduce item(s): 0 


State 71:
0: [P15 2] declarator -> declarator '['  . constant_expression ']'   { ')' ',' '[' ';' }  0, (1 2 ) 0
1: [P16 0] constant_expression ->  . INT_CONSTANT   { ']' }  0, () 1
2: [P17 0] constant_expression ->  . FLOAT_CONSTANT   { ']' }  0, () 2
  0:   On constant_expression to state 102 with (0 )
  1:   On INT_CONSTANT to state 103 with (1 )
  2:   On FLOAT_CONSTANT to state 104 with (2 )


State 72:
0: [P20 4] compound_statement -> '{' declaration_list statement_list '}'  .   { VOID INT FLOAT <EOF> }  1, () -1
  Reduce item(s): 0 


State 73:
0: [P23 3] statement -> '{' statement_list '}'  .   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 74:
0: [P27 3] statement -> RETURN expression ';'  .   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 75:
0: [P33 2] expression -> expression OR_OP  . logical_and_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 ) 0
1: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (3 4 5 ) 1
2: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 ) 0
3: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 9 10 ) 2
4: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (3 4 5 ) 1
5: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (3 4 5 ) 1
6: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (11 12 13 ) 3
7: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 9 10 ) 2
8: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 9 10 ) 2
9: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 9 10 ) 2
10: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 9 10 ) 2
11: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (14 15 16 ) 4
12: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (11 12 13 ) 3
13: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (11 12 13 ) 3
14: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (17 18 ) 5
15: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (14 15 16 ) 4
16: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (14 15 16 ) 4
17: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (19 20 21 22 ) 6
18: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (23 24 ) 7
19: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (25 26 27 28 29 30 ) 8
20: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 9
21: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 9
22: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (31 32 ) 10
23: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 11
24: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 12
25: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (31 32 ) 10
26: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (31 32 ) 10
27: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 13
28: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 14
29: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 15
30: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 16
31: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 9
32: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (31 32 ) 10
  0:   On logical_and_expression to state 105 with (0 2 )
  1:   On equality_expression to state 47 with (1 4 5 )
  2:   On relational_expression to state 48 with (3 7 8 9 10 )
  3:   On additive_expression to state 49 with (6 12 13 )
  4:   On multiplicative_expression to state 50 with (11 15 16 )
  5:   On unary_expression to state 51 with (14 )
  6:   On postfix_expression to state 52 with (17 )
  7:   On unary_operator to state 53 with (18 )
  8:   On primary_expression to state 54 with (19 )
  9:   On IDENTIFIER to state 55 with (20 21 31 )
  10:   On l_expression to state 56 with (22 25 26 32 )
  11:   On '-' to state 57 with (23 )
  12:   On '!' to state 58 with (24 )
  13:   On INT_CONSTANT to state 59 with (27 )
  14:   On FLOAT_CONSTANT to state 60 with (28 )
  15:   On STRING_LITERAL to state 61 with (29 )
  16:   On '(' to state 62 with (30 )


State 76:
0: [P35 2] logical_and_expression -> logical_and_expression AND_OP  . equality_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
1: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 7 8 ) 1
2: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
3: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
4: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 ) 2
5: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 7 8 ) 1
6: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 7 8 ) 1
7: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 7 8 ) 1
8: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 7 8 ) 1
9: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (12 13 14 ) 3
10: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 ) 2
11: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 ) 2
12: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (15 16 ) 4
13: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (12 13 14 ) 3
14: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (12 13 14 ) 3
15: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (17 18 19 20 ) 5
16: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 6
17: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (23 24 25 26 27 28 ) 7
18: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 8
19: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 8
20: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (29 30 ) 9
21: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 10
22: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 11
23: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (29 30 ) 9
24: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (29 30 ) 9
25: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 12
26: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 13
27: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 14
28: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 15
29: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 8
30: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (29 30 ) 9
  0:   On equality_expression to state 106 with (0 2 3 )
  1:   On relational_expression to state 48 with (1 5 6 7 8 )
  2:   On additive_expression to state 49 with (4 10 11 )
  3:   On multiplicative_expression to state 50 with (9 13 14 )
  4:   On unary_expression to state 51 with (12 )
  5:   On postfix_expression to state 52 with (15 )
  6:   On unary_operator to state 53 with (16 )
  7:   On primary_expression to state 54 with (17 )
  8:   On IDENTIFIER to state 55 with (18 19 29 )
  9:   On l_expression to state 56 with (20 23 24 30 )
  10:   On '-' to state 57 with (21 )
  11:   On '!' to state 58 with (22 )
  12:   On INT_CONSTANT to state 59 with (25 )
  13:   On FLOAT_CONSTANT to state 60 with (26 )
  14:   On STRING_LITERAL to state 61 with (27 )
  15:   On '(' to state 62 with (28 )


State 77:
0: [P37 2] equality_expression -> equality_expression EQ_OP  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 4 5 ) 0
1: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 ) 1
2: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 4 5 ) 0
3: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 4 5 ) 0
4: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 4 5 ) 0
5: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 4 5 ) 0
6: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 ) 2
7: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 ) 1
8: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 ) 1
9: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (12 13 ) 3
10: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 ) 2
11: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 ) 2
12: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (14 15 16 17 ) 4
13: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (18 19 ) 5
14: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (20 21 22 23 24 25 ) 6
15: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 7
16: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 7
17: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (26 27 ) 8
18: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 9
19: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 10
20: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (26 27 ) 8
21: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (26 27 ) 8
22: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 11
23: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 12
24: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 13
25: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 14
26: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 7
27: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (26 27 ) 8
  0:   On relational_expression to state 107 with (0 2 3 4 5 )
  1:   On additive_expression to state 49 with (1 7 8 )
  2:   On multiplicative_expression to state 50 with (6 10 11 )
  3:   On unary_expression to state 51 with (9 )
  4:   On postfix_expression to state 52 with (12 )
  5:   On unary_operator to state 53 with (13 )
  6:   On primary_expression to state 54 with (14 )
  7:   On IDENTIFIER to state 55 with (15 16 26 )
  8:   On l_expression to state 56 with (17 20 21 27 )
  9:   On '-' to state 57 with (18 )
  10:   On '!' to state 58 with (19 )
  11:   On INT_CONSTANT to state 59 with (22 )
  12:   On FLOAT_CONSTANT to state 60 with (23 )
  13:   On STRING_LITERAL to state 61 with (24 )
  14:   On '(' to state 62 with (25 )


State 78:
0: [P38 2] equality_expression -> equality_expression NE_OP  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 4 5 ) 0
1: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 ) 1
2: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 4 5 ) 0
3: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 4 5 ) 0
4: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 4 5 ) 0
5: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 4 5 ) 0
6: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 ) 2
7: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 ) 1
8: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 ) 1
9: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (12 13 ) 3
10: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 ) 2
11: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 ) 2
12: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (14 15 16 17 ) 4
13: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (18 19 ) 5
14: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (20 21 22 23 24 25 ) 6
15: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 7
16: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 7
17: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (26 27 ) 8
18: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 9
19: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 10
20: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (26 27 ) 8
21: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (26 27 ) 8
22: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 11
23: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 12
24: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 13
25: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 14
26: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 7
27: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (26 27 ) 8
  0:   On relational_expression to state 108 with (0 2 3 4 5 )
  1:   On additive_expression to state 49 with (1 7 8 )
  2:   On multiplicative_expression to state 50 with (6 10 11 )
  3:   On unary_expression to state 51 with (9 )
  4:   On postfix_expression to state 52 with (12 )
  5:   On unary_operator to state 53 with (13 )
  6:   On primary_expression to state 54 with (14 )
  7:   On IDENTIFIER to state 55 with (15 16 26 )
  8:   On l_expression to state 56 with (17 20 21 27 )
  9:   On '-' to state 57 with (18 )
  10:   On '!' to state 58 with (19 )
  11:   On INT_CONSTANT to state 59 with (22 )
  12:   On FLOAT_CONSTANT to state 60 with (23 )
  13:   On STRING_LITERAL to state 61 with (24 )
  14:   On '(' to state 62 with (25 )


State 79:
0: [P40 2] relational_expression -> relational_expression '<'  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
1: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 ) 1
2: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
3: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
4: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (7 8 ) 2
5: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 ) 1
6: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 ) 1
7: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 12 ) 3
8: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (13 14 ) 4
9: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (15 16 17 18 19 20 ) 5
10: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 6
11: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 6
12: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
13: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 8
14: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 9
15: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
16: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
17: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 10
18: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 11
19: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 12
20: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 13
21: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 6
22: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
  0:   On additive_expression to state 109 with (0 2 3 )
  1:   On multiplicative_expression to state 50 with (1 5 6 )
  2:   On unary_expression to state 51 with (4 )
  3:   On postfix_expression to state 52 with (7 )
  4:   On unary_operator to state 53 with (8 )
  5:   On primary_expression to state 54 with (9 )
  6:   On IDENTIFIER to state 55 with (10 11 21 )
  7:   On l_expression to state 56 with (12 15 16 22 )
  8:   On '-' to state 57 with (13 )
  9:   On '!' to state 58 with (14 )
  10:   On INT_CONSTANT to state 59 with (17 )
  11:   On FLOAT_CONSTANT to state 60 with (18 )
  12:   On STRING_LITERAL to state 61 with (19 )
  13:   On '(' to state 62 with (20 )


State 80:
0: [P41 2] relational_expression -> relational_expression '>'  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
1: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 ) 1
2: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
3: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
4: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (7 8 ) 2
5: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 ) 1
6: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 ) 1
7: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 12 ) 3
8: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (13 14 ) 4
9: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (15 16 17 18 19 20 ) 5
10: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 6
11: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 6
12: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
13: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 8
14: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 9
15: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
16: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
17: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 10
18: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 11
19: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 12
20: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 13
21: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 6
22: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
  0:   On additive_expression to state 110 with (0 2 3 )
  1:   On multiplicative_expression to state 50 with (1 5 6 )
  2:   On unary_expression to state 51 with (4 )
  3:   On postfix_expression to state 52 with (7 )
  4:   On unary_operator to state 53 with (8 )
  5:   On primary_expression to state 54 with (9 )
  6:   On IDENTIFIER to state 55 with (10 11 21 )
  7:   On l_expression to state 56 with (12 15 16 22 )
  8:   On '-' to state 57 with (13 )
  9:   On '!' to state 58 with (14 )
  10:   On INT_CONSTANT to state 59 with (17 )
  11:   On FLOAT_CONSTANT to state 60 with (18 )
  12:   On STRING_LITERAL to state 61 with (19 )
  13:   On '(' to state 62 with (20 )


State 81:
0: [P42 2] relational_expression -> relational_expression LE_OP  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
1: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 ) 1
2: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
3: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
4: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (7 8 ) 2
5: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 ) 1
6: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 ) 1
7: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 12 ) 3
8: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (13 14 ) 4
9: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (15 16 17 18 19 20 ) 5
10: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 6
11: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 6
12: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
13: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 8
14: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 9
15: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
16: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
17: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 10
18: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 11
19: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 12
20: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 13
21: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 6
22: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
  0:   On additive_expression to state 111 with (0 2 3 )
  1:   On multiplicative_expression to state 50 with (1 5 6 )
  2:   On unary_expression to state 51 with (4 )
  3:   On postfix_expression to state 52 with (7 )
  4:   On unary_operator to state 53 with (8 )
  5:   On primary_expression to state 54 with (9 )
  6:   On IDENTIFIER to state 55 with (10 11 21 )
  7:   On l_expression to state 56 with (12 15 16 22 )
  8:   On '-' to state 57 with (13 )
  9:   On '!' to state 58 with (14 )
  10:   On INT_CONSTANT to state 59 with (17 )
  11:   On FLOAT_CONSTANT to state 60 with (18 )
  12:   On STRING_LITERAL to state 61 with (19 )
  13:   On '(' to state 62 with (20 )


State 82:
0: [P43 2] relational_expression -> relational_expression GE_OP  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
1: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 ) 1
2: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
3: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
4: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (7 8 ) 2
5: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 ) 1
6: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 6 ) 1
7: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 12 ) 3
8: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (13 14 ) 4
9: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (15 16 17 18 19 20 ) 5
10: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 6
11: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 6
12: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
13: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 8
14: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 9
15: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
16: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
17: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 10
18: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 11
19: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 12
20: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 13
21: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 6
22: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (21 22 ) 7
  0:   On additive_expression to state 112 with (0 2 3 )
  1:   On multiplicative_expression to state 50 with (1 5 6 )
  2:   On unary_expression to state 51 with (4 )
  3:   On postfix_expression to state 52 with (7 )
  4:   On unary_operator to state 53 with (8 )
  5:   On primary_expression to state 54 with (9 )
  6:   On IDENTIFIER to state 55 with (10 11 21 )
  7:   On l_expression to state 56 with (12 15 16 22 )
  8:   On '-' to state 57 with (13 )
  9:   On '!' to state 58 with (14 )
  10:   On INT_CONSTANT to state 59 with (17 )
  11:   On FLOAT_CONSTANT to state 60 with (18 )
  12:   On STRING_LITERAL to state 61 with (19 )
  13:   On '(' to state 62 with (20 )


State 83:
0: [P45 2] additive_expression -> additive_expression '+'  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
1: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 ) 1
2: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
3: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
4: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 9 ) 2
5: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (10 11 ) 3
6: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (12 13 14 15 16 17 ) 4
7: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 5
8: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 5
9: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (18 19 ) 6
10: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 7
11: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 8
12: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (18 19 ) 6
13: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (18 19 ) 6
14: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 9
15: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 10
16: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 11
17: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 12
18: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 5
19: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (18 19 ) 6
  0:   On multiplicative_expression to state 113 with (0 2 3 )
  1:   On unary_expression to state 51 with (1 )
  2:   On postfix_expression to state 52 with (4 )
  3:   On unary_operator to state 53 with (5 )
  4:   On primary_expression to state 54 with (6 )
  5:   On IDENTIFIER to state 55 with (7 8 18 )
  6:   On l_expression to state 56 with (9 12 13 19 )
  7:   On '-' to state 57 with (10 )
  8:   On '!' to state 58 with (11 )
  9:   On INT_CONSTANT to state 59 with (14 )
  10:   On FLOAT_CONSTANT to state 60 with (15 )
  11:   On STRING_LITERAL to state 61 with (16 )
  12:   On '(' to state 62 with (17 )


State 84:
0: [P46 2] additive_expression -> additive_expression '-'  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
1: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (4 5 ) 1
2: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
3: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 3 ) 0
4: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (6 7 8 9 ) 2
5: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (10 11 ) 3
6: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (12 13 14 15 16 17 ) 4
7: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 5
8: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 5
9: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (18 19 ) 6
10: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 7
11: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 8
12: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (18 19 ) 6
13: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (18 19 ) 6
14: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 9
15: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 10
16: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 11
17: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 12
18: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 5
19: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (18 19 ) 6
  0:   On multiplicative_expression to state 114 with (0 2 3 )
  1:   On unary_expression to state 51 with (1 )
  2:   On postfix_expression to state 52 with (4 )
  3:   On unary_operator to state 53 with (5 )
  4:   On primary_expression to state 54 with (6 )
  5:   On IDENTIFIER to state 55 with (7 8 18 )
  6:   On l_expression to state 56 with (9 12 13 19 )
  7:   On '-' to state 57 with (10 )
  8:   On '!' to state 58 with (11 )
  9:   On INT_CONSTANT to state 59 with (14 )
  10:   On FLOAT_CONSTANT to state 60 with (15 )
  11:   On STRING_LITERAL to state 61 with (16 )
  12:   On '(' to state 62 with (17 )


State 85:
0: [P48 2] multiplicative_expression -> multiplicative_expression '*'  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 ) 0
1: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (3 4 5 6 ) 1
2: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (7 8 ) 2
3: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 12 13 14 ) 3
4: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 4
5: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 4
6: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (15 16 ) 5
7: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 6
8: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 7
9: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (15 16 ) 5
10: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (15 16 ) 5
11: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 8
12: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 9
13: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 10
14: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 11
15: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 4
16: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (15 16 ) 5
  0:   On unary_expression to state 115 with (0 )
  1:   On postfix_expression to state 52 with (1 )
  2:   On unary_operator to state 53 with (2 )
  3:   On primary_expression to state 54 with (3 )
  4:   On IDENTIFIER to state 55 with (4 5 15 )
  5:   On l_expression to state 56 with (6 9 10 16 )
  6:   On '-' to state 57 with (7 )
  7:   On '!' to state 58 with (8 )
  8:   On INT_CONSTANT to state 59 with (11 )
  9:   On FLOAT_CONSTANT to state 60 with (12 )
  10:   On STRING_LITERAL to state 61 with (13 )
  11:   On '(' to state 62 with (14 )


State 86:
0: [P49 2] multiplicative_expression -> multiplicative_expression '/'  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 ) 0
1: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (3 4 5 6 ) 1
2: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (7 8 ) 2
3: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (9 10 11 12 13 14 ) 3
4: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 4
5: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 4
6: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (15 16 ) 5
7: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 6
8: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 7
9: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (15 16 ) 5
10: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (15 16 ) 5
11: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 8
12: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 9
13: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 10
14: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 11
15: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 4
16: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (15 16 ) 5
  0:   On unary_expression to state 116 with (0 )
  1:   On postfix_expression to state 52 with (1 )
  2:   On unary_operator to state 53 with (2 )
  3:   On primary_expression to state 54 with (3 )
  4:   On IDENTIFIER to state 55 with (4 5 15 )
  5:   On l_expression to state 56 with (6 9 10 16 )
  6:   On '-' to state 57 with (7 )
  7:   On '!' to state 58 with (8 )
  8:   On INT_CONSTANT to state 59 with (11 )
  9:   On FLOAT_CONSTANT to state 60 with (12 )
  10:   On STRING_LITERAL to state 61 with (13 )
  11:   On '(' to state 62 with (14 )


State 87:
0: [P51 2] unary_expression -> unary_operator postfix_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 88:
0: [P53 2] postfix_expression -> IDENTIFIER '('  . ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
1: [P54 2] postfix_expression -> IDENTIFIER '('  . expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (2 3 ) 1
2: [P64 0] expression_list ->  . expression   { ')' ',' }  0, (4 5 ) 2
3: [P65 0] expression_list ->  . expression_list ',' expression   { ')' ',' }  0, (2 3 ) 1
4: [P32 0] expression ->  . logical_and_expression   { OR_OP ')' ',' }  0, (6 7 ) 3
5: [P33 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' ',' }  0, (4 5 ) 2
6: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP ')' ',' }  0, (8 9 10 ) 4
7: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP ')' ',' }  0, (6 7 ) 3
8: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' ',' }  0, (11 12 13 14 15 ) 5
9: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' ',' }  0, (8 9 10 ) 4
10: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' ',' }  0, (8 9 10 ) 4
11: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (16 17 18 ) 6
12: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (11 12 13 14 15 ) 5
13: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (11 12 13 14 15 ) 5
14: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (11 12 13 14 15 ) 5
15: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (11 12 13 14 15 ) 5
16: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' }  0, (19 20 21 ) 7
17: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' }  0, (16 17 18 ) 6
18: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' }  0, (16 17 18 ) 6
19: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (22 23 ) 8
20: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (19 20 21 ) 7
21: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (19 20 21 ) 7
22: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (24 25 26 27 ) 9
23: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (28 29 ) 10
24: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (30 31 32 33 34 35 ) 11
25: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 12
26: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 12
27: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (36 37 ) 13
28: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 14
29: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 15
30: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (36 37 ) 13
31: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (36 37 ) 13
32: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 16
33: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 17
34: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 18
35: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 19
36: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' '=' '<' '>' '+' '-' '*' '/' }  0, () 12
37: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' '=' '<' '>' '+' '-' '*' '/' }  0, (36 37 ) 13
  0:   On ')' to state 117 with (0 )
  1:   On expression_list to state 118 with (1 3 )
  2:   On expression to state 94 with (2 5 )
  3:   On logical_and_expression to state 46 with (4 7 )
  4:   On equality_expression to state 47 with (6 9 10 )
  5:   On relational_expression to state 48 with (8 12 13 14 15 )
  6:   On additive_expression to state 49 with (11 17 18 )
  7:   On multiplicative_expression to state 50 with (16 20 21 )
  8:   On unary_expression to state 51 with (19 )
  9:   On postfix_expression to state 52 with (22 )
  10:   On unary_operator to state 53 with (23 )
  11:   On primary_expression to state 54 with (24 )
  12:   On IDENTIFIER to state 55 with (25 26 36 )
  13:   On l_expression to state 56 with (27 30 31 37 )
  14:   On '-' to state 57 with (28 )
  15:   On '!' to state 58 with (29 )
  16:   On INT_CONSTANT to state 59 with (32 )
  17:   On FLOAT_CONSTANT to state 60 with (33 )
  18:   On STRING_LITERAL to state 61 with (34 )
  19:   On '(' to state 62 with (35 )


State 89:
0: [P55 2] postfix_expression -> l_expression INC_OP  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 90:
0: [P57 2] primary_expression -> l_expression '='  . expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 ) 0
1: [P32 0] expression ->  . logical_and_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (3 4 ) 1
2: [P33 0] expression ->  . expression OR_OP logical_and_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (1 2 ) 0
3: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (5 6 7 ) 2
4: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (3 4 ) 1
5: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (8 9 10 11 12 ) 3
6: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (5 6 7 ) 2
7: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (5 6 7 ) 2
8: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (13 14 15 ) 4
9: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (8 9 10 11 12 ) 3
10: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (8 9 10 11 12 ) 3
11: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (8 9 10 11 12 ) 3
12: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (8 9 10 11 12 ) 3
13: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
14: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (13 14 15 ) 4
15: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (13 14 15 ) 4
16: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (19 20 ) 6
17: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
18: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
19: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 23 24 ) 7
20: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (25 26 ) 8
21: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (27 28 29 30 31 32 ) 9
22: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 10
23: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 10
24: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
25: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 12
26: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 13
27: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
28: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
29: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 14
30: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 15
31: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 16
32: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 17
33: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 10
34: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
  0:   On expression to state 119 with (0 2 )
  1:   On logical_and_expression to state 46 with (1 4 )
  2:   On equality_expression to state 47 with (3 6 7 )
  3:   On relational_expression to state 48 with (5 9 10 11 12 )
  4:   On additive_expression to state 49 with (8 14 15 )
  5:   On multiplicative_expression to state 50 with (13 17 18 )
  6:   On unary_expression to state 51 with (16 )
  7:   On postfix_expression to state 52 with (19 )
  8:   On unary_operator to state 53 with (20 )
  9:   On primary_expression to state 54 with (21 )
  10:   On IDENTIFIER to state 55 with (22 23 33 )
  11:   On l_expression to state 56 with (24 27 28 34 )
  12:   On '-' to state 57 with (25 )
  13:   On '!' to state 58 with (26 )
  14:   On INT_CONSTANT to state 59 with (29 )
  15:   On FLOAT_CONSTANT to state 60 with (30 )
  16:   On STRING_LITERAL to state 61 with (31 )
  17:   On '(' to state 62 with (32 )


State 91:
0: [P61 2] primary_expression -> '(' expression  . ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
1: [P33 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ')' }  0, () 1
  0:   On ')' to state 120 with (0 )
  1:   On OR_OP to state 75 with (1 )


State 92:
0: [P28 3] statement -> IDENTIFIER '(' ')'  . ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
  0:   On ';' to state 121 with (0 )


State 93:
0: [P29 3] statement -> IDENTIFIER '(' expression_list  . ')' ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
1: [P65 1] expression_list -> expression_list  . ',' expression   { ')' ',' }  0, () 1
  0:   On ')' to state 122 with (0 )
  1:   On ',' to state 123 with (1 )


State 94:
0: [P64 1] expression_list -> expression  .   { ')' ',' }  1, () -1
1: [P33 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ')' ',' }  0, () 0
  0:   On OR_OP to state 75 with (1 )
  Reduce item(s): 0 


State 95:
0: [P73 3] declaration -> type_specifier #0003 declarator_list  . ';'   { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }  0, () 0
1: [P76 1] declarator_list -> declarator_list  . ',' declarator   { ',' ';' }  0, () 1
  0:   On ';' to state 124 with (0 )
  1:   On ',' to state 125 with (1 )


State 96:
0: [P75 1] declarator_list -> declarator  .   { ',' ';' }  1, () -1
1: [P15 1] declarator -> declarator  . '[' constant_expression ']'   { ',' '[' ';' }  0, () 0
  0:   On '[' to state 71 with (1 )
  Reduce item(s): 0 


State 97:
0: [P68 3] selection_statement -> IF '(' expression  . ')' statement ELSE statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
1: [P33 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ')' }  0, () 1
  0:   On ')' to state 126 with (0 )
  1:   On OR_OP to state 75 with (1 )


State 98:
0: [P69 3] iteration_statement -> WHILE '(' expression  . ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
1: [P33 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ')' }  0, () 1
  0:   On ')' to state 127 with (0 )
  1:   On OR_OP to state 75 with (1 )


State 99:
0: [P70 3] iteration_statement -> FOR '(' expression  . ';' expression ';' expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
1: [P33 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ';' }  0, () 1
  0:   On ';' to state 128 with (0 )
  1:   On OR_OP to state 75 with (1 )


State 100:
0: [P31 3] assignment_statement -> l_expression '=' expression  . ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
1: [P33 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ';' }  0, () 1
  0:   On ';' to state 129 with (0 )
  1:   On OR_OP to state 75 with (1 )


State 101:
0: [P63 3] l_expression -> l_expression '[' expression  . ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 0
1: [P33 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ']' }  0, () 1
  0:   On ']' to state 130 with (0 )
  1:   On OR_OP to state 75 with (1 )


State 102:
0: [P15 3] declarator -> declarator '[' constant_expression  . ']'   { ')' ',' '[' ';' }  0, () 0
  0:   On ']' to state 131 with (0 )


State 103:
0: [P16 1] constant_expression -> INT_CONSTANT  .   { ']' }  1, () -1
  Reduce item(s): 0 


State 104:
0: [P17 1] constant_expression -> FLOAT_CONSTANT  .   { ']' }  1, () -1
  Reduce item(s): 0 


State 105:
0: [P33 3] expression -> expression OR_OP logical_and_expression  .   { OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
1: [P35 1] logical_and_expression -> logical_and_expression  . AND_OP equality_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
  0:   On AND_OP to state 76 with (1 )
  Reduce item(s): 0 
Solved SR CONFLICT on AND_OP:
	shift to state 76, removed AND_OP from LA-set of rule 33)


State 106:
0: [P35 3] logical_and_expression -> logical_and_expression AND_OP equality_expression  .   { AND_OP OR_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
1: [P37 1] equality_expression -> equality_expression  . EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P38 1] equality_expression -> equality_expression  . NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
  0:   On EQ_OP to state 77 with (1 )
  1:   On NE_OP to state 78 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on EQ_OP:
	shift to state 77, removed EQ_OP from LA-set of rule 35)
Solved SR CONFLICT on NE_OP:
	shift to state 78, removed NE_OP from LA-set of rule 35)


State 107:
0: [P37 3] equality_expression -> equality_expression EQ_OP relational_expression  .   { AND_OP OR_OP EQ_OP NE_OP ')' ',' ']' ';' '+' '-' '*' '/' }  1, () -1
1: [P40 1] relational_expression -> relational_expression  . '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P41 1] relational_expression -> relational_expression  . '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
3: [P42 1] relational_expression -> relational_expression  . LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 2
4: [P43 1] relational_expression -> relational_expression  . GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 3
  0:   On '<' to state 79 with (1 )
  1:   On '>' to state 80 with (2 )
  2:   On LE_OP to state 81 with (3 )
  3:   On GE_OP to state 82 with (4 )
  Reduce item(s): 0 
Solved SR CONFLICT on '<':
	shift to state 79, removed '<' from LA-set of rule 37)
Solved SR CONFLICT on '>':
	shift to state 80, removed '>' from LA-set of rule 37)
Solved SR CONFLICT on LE_OP:
	shift to state 81, removed LE_OP from LA-set of rule 37)
Solved SR CONFLICT on GE_OP:
	shift to state 82, removed GE_OP from LA-set of rule 37)


State 108:
0: [P38 3] equality_expression -> equality_expression NE_OP relational_expression  .   { AND_OP OR_OP EQ_OP NE_OP ')' ',' ']' ';' '+' '-' '*' '/' }  1, () -1
1: [P40 1] relational_expression -> relational_expression  . '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P41 1] relational_expression -> relational_expression  . '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
3: [P42 1] relational_expression -> relational_expression  . LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 2
4: [P43 1] relational_expression -> relational_expression  . GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 3
  0:   On '<' to state 79 with (1 )
  1:   On '>' to state 80 with (2 )
  2:   On LE_OP to state 81 with (3 )
  3:   On GE_OP to state 82 with (4 )
  Reduce item(s): 0 
Solved SR CONFLICT on '<':
	shift to state 79, removed '<' from LA-set of rule 38)
Solved SR CONFLICT on '>':
	shift to state 80, removed '>' from LA-set of rule 38)
Solved SR CONFLICT on LE_OP:
	shift to state 81, removed LE_OP from LA-set of rule 38)
Solved SR CONFLICT on GE_OP:
	shift to state 82, removed GE_OP from LA-set of rule 38)


State 109:
0: [P40 3] relational_expression -> relational_expression '<' additive_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '*' '/' }  1, () -1
1: [P45 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P46 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
  0:   On '+' to state 83 with (1 )
  1:   On '-' to state 84 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '+':
	shift to state 83, removed '+' from LA-set of rule 40)
Solved SR CONFLICT on '-':
	shift to state 84, removed '-' from LA-set of rule 40)


State 110:
0: [P41 3] relational_expression -> relational_expression '>' additive_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '*' '/' }  1, () -1
1: [P45 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P46 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
  0:   On '+' to state 83 with (1 )
  1:   On '-' to state 84 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '+':
	shift to state 83, removed '+' from LA-set of rule 41)
Solved SR CONFLICT on '-':
	shift to state 84, removed '-' from LA-set of rule 41)


State 111:
0: [P42 3] relational_expression -> relational_expression LE_OP additive_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '*' '/' }  1, () -1
1: [P45 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P46 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
  0:   On '+' to state 83 with (1 )
  1:   On '-' to state 84 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '+':
	shift to state 83, removed '+' from LA-set of rule 42)
Solved SR CONFLICT on '-':
	shift to state 84, removed '-' from LA-set of rule 42)


State 112:
0: [P43 3] relational_expression -> relational_expression GE_OP additive_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '*' '/' }  1, () -1
1: [P45 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P46 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
  0:   On '+' to state 83 with (1 )
  1:   On '-' to state 84 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '+':
	shift to state 83, removed '+' from LA-set of rule 43)
Solved SR CONFLICT on '-':
	shift to state 84, removed '-' from LA-set of rule 43)


State 113:
0: [P45 3] additive_expression -> additive_expression '+' multiplicative_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' }  1, () -1
1: [P48 1] multiplicative_expression -> multiplicative_expression  . '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P49 1] multiplicative_expression -> multiplicative_expression  . '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
  0:   On '*' to state 85 with (1 )
  1:   On '/' to state 86 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '*':
	shift to state 85, removed '*' from LA-set of rule 45)
Solved SR CONFLICT on '/':
	shift to state 86, removed '/' from LA-set of rule 45)


State 114:
0: [P46 3] additive_expression -> additive_expression '-' multiplicative_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' }  1, () -1
1: [P48 1] multiplicative_expression -> multiplicative_expression  . '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
2: [P49 1] multiplicative_expression -> multiplicative_expression  . '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 1
  0:   On '*' to state 85 with (1 )
  1:   On '/' to state 86 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '*':
	shift to state 85, removed '*' from LA-set of rule 46)
Solved SR CONFLICT on '/':
	shift to state 86, removed '/' from LA-set of rule 46)


State 115:
0: [P48 3] multiplicative_expression -> multiplicative_expression '*' unary_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 116:
0: [P49 3] multiplicative_expression -> multiplicative_expression '/' unary_expression  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 117:
0: [P53 3] postfix_expression -> IDENTIFIER '(' ')'  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 118:
0: [P54 3] postfix_expression -> IDENTIFIER '(' expression_list  . ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
1: [P65 1] expression_list -> expression_list  . ',' expression   { ')' ',' }  0, () 1
  0:   On ')' to state 132 with (0 )
  1:   On ',' to state 123 with (1 )


State 119:
0: [P57 3] primary_expression -> l_expression '=' expression  .   { AND_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
1: [P33 1] expression -> expression  . OR_OP logical_and_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  0, () 0
  0:   On OR_OP to state 75 with (1 )
  Reduce item(s): 0 
Solved SR CONFLICT on OR_OP:
	shift to state 75, removed OR_OP from LA-set of rule 57)


State 120:
0: [P61 3] primary_expression -> '(' expression ')'  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 121:
0: [P28 4] statement -> IDENTIFIER '(' ')' ';'  .   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 122:
0: [P29 4] statement -> IDENTIFIER '(' expression_list ')'  . ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
  0:   On ';' to state 133 with (0 )


State 123:
0: [P65 2] expression_list -> expression_list ','  . expression   { ')' ',' }  0, (1 2 ) 0
1: [P32 0] expression ->  . logical_and_expression   { OR_OP ')' ',' }  0, (3 4 ) 1
2: [P33 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' ',' }  0, (1 2 ) 0
3: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP ')' ',' }  0, (5 6 7 ) 2
4: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP ')' ',' }  0, (3 4 ) 1
5: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' ',' }  0, (8 9 10 11 12 ) 3
6: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' ',' }  0, (5 6 7 ) 2
7: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' ',' }  0, (5 6 7 ) 2
8: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (13 14 15 ) 4
9: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (8 9 10 11 12 ) 3
10: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (8 9 10 11 12 ) 3
11: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (8 9 10 11 12 ) 3
12: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' }  0, (8 9 10 11 12 ) 3
13: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' }  0, (16 17 18 ) 5
14: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' }  0, (13 14 15 ) 4
15: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' }  0, (13 14 15 ) 4
16: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (19 20 ) 6
17: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
18: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
19: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (21 22 23 24 ) 7
20: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (25 26 ) 8
21: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (27 28 29 30 31 32 ) 9
22: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 10
23: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 10
24: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
25: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 12
26: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 13
27: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
28: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
29: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 14
30: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 15
31: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 16
32: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' '<' '>' '+' '-' '*' '/' }  0, () 17
33: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' '=' '<' '>' '+' '-' '*' '/' }  0, () 10
34: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' '=' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
  0:   On expression to state 134 with (0 2 )
  1:   On logical_and_expression to state 46 with (1 4 )
  2:   On equality_expression to state 47 with (3 6 7 )
  3:   On relational_expression to state 48 with (5 9 10 11 12 )
  4:   On additive_expression to state 49 with (8 14 15 )
  5:   On multiplicative_expression to state 50 with (13 17 18 )
  6:   On unary_expression to state 51 with (16 )
  7:   On postfix_expression to state 52 with (19 )
  8:   On unary_operator to state 53 with (20 )
  9:   On primary_expression to state 54 with (21 )
  10:   On IDENTIFIER to state 55 with (22 23 33 )
  11:   On l_expression to state 56 with (24 27 28 34 )
  12:   On '-' to state 57 with (25 )
  13:   On '!' to state 58 with (26 )
  14:   On INT_CONSTANT to state 59 with (29 )
  15:   On FLOAT_CONSTANT to state 60 with (30 )
  16:   On STRING_LITERAL to state 61 with (31 )
  17:   On '(' to state 62 with (32 )


State 124:
0: [P73 4] declaration -> type_specifier #0003 declarator_list ';'  .   { IDENTIFIER VOID INT FLOAT IF WHILE FOR RETURN '{' ';' }  1, () -1
  Reduce item(s): 0 


State 125:
0: [P76 2] declarator_list -> declarator_list ','  . declarator   { ',' ';' }  0, (1 2 ) 0
1: [P14 0] declarator ->  . IDENTIFIER   { ',' '[' ';' }  0, () 1
2: [P15 0] declarator ->  . declarator '[' constant_expression ']'   { ',' '[' ';' }  0, (1 2 ) 0
  0:   On declarator to state 135 with (0 2 )
  1:   On IDENTIFIER to state 39 with (1 )


State 126:
0: [P68 4] selection_statement -> IF '(' expression ')'  . statement ELSE statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (1 2 3 4 5 6 7 ) 0
1: [P23 0] statement ->  . '{' statement_list '}'   { ELSE }  0, () 1
2: [P24 0] statement ->  . selection_statement   { ELSE }  0, (8 ) 2
3: [P25 0] statement ->  . iteration_statement   { ELSE }  0, (9 10 ) 3
4: [P26 0] statement ->  . assignment_statement   { ELSE }  0, (11 12 ) 4
5: [P27 0] statement ->  . RETURN expression ';'   { ELSE }  0, () 5
6: [P28 0] statement ->  . IDENTIFIER '(' ')' ';'   { ELSE }  0, () 6
7: [P29 0] statement ->  . IDENTIFIER '(' expression_list ')' ';'   { ELSE }  0, () 6
8: [P68 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { ELSE }  0, () 7
9: [P69 0] iteration_statement ->  . WHILE '(' expression ')' statement   { ELSE }  0, () 8
10: [P70 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { ELSE }  0, () 9
11: [P30 0] assignment_statement ->  . ';'   { ELSE }  0, () 10
12: [P31 0] assignment_statement ->  . l_expression '=' expression ';'   { ELSE }  0, (13 14 ) 11
13: [P62 0] l_expression ->  . IDENTIFIER   { '[' '=' }  0, () 6
14: [P63 0] l_expression ->  . l_expression '[' expression ']'   { '[' '=' }  0, (13 14 ) 11
  0:   On statement to state 136 with (0 )
  1:   On '{' to state 24 with (1 )
  2:   On selection_statement to state 25 with (2 )
  3:   On iteration_statement to state 26 with (3 )
  4:   On assignment_statement to state 27 with (4 )
  5:   On RETURN to state 28 with (5 )
  6:   On IDENTIFIER to state 29 with (6 7 13 )
  7:   On IF to state 31 with (8 )
  8:   On WHILE to state 32 with (9 )
  9:   On FOR to state 33 with (10 )
  10:   On ';' to state 34 with (11 )
  11:   On l_expression to state 35 with (12 14 )


State 127:
0: [P69 4] iteration_statement -> WHILE '(' expression ')'  . statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (1 2 3 4 5 6 7 ) 0
1: [P23 0] statement ->  . '{' statement_list '}'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 1
2: [P24 0] statement ->  . selection_statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (8 ) 2
3: [P25 0] statement ->  . iteration_statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (9 10 ) 3
4: [P26 0] statement ->  . assignment_statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (11 12 ) 4
5: [P27 0] statement ->  . RETURN expression ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 5
6: [P28 0] statement ->  . IDENTIFIER '(' ')' ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 6
7: [P29 0] statement ->  . IDENTIFIER '(' expression_list ')' ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 6
8: [P68 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 7
9: [P69 0] iteration_statement ->  . WHILE '(' expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 8
10: [P70 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 9
11: [P30 0] assignment_statement ->  . ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 10
12: [P31 0] assignment_statement ->  . l_expression '=' expression ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (13 14 ) 11
13: [P62 0] l_expression ->  . IDENTIFIER   { '[' '=' }  0, () 6
14: [P63 0] l_expression ->  . l_expression '[' expression ']'   { '[' '=' }  0, (13 14 ) 11
  0:   On statement to state 137 with (0 )
  1:   On '{' to state 24 with (1 )
  2:   On selection_statement to state 25 with (2 )
  3:   On iteration_statement to state 26 with (3 )
  4:   On assignment_statement to state 27 with (4 )
  5:   On RETURN to state 28 with (5 )
  6:   On IDENTIFIER to state 29 with (6 7 13 )
  7:   On IF to state 31 with (8 )
  8:   On WHILE to state 32 with (9 )
  9:   On FOR to state 33 with (10 )
  10:   On ';' to state 34 with (11 )
  11:   On l_expression to state 35 with (12 14 )


State 128:
0: [P70 4] iteration_statement -> FOR '(' expression ';'  . expression ';' expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (1 2 ) 0
1: [P32 0] expression ->  . logical_and_expression   { OR_OP ';' }  0, (3 4 ) 1
2: [P33 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ';' }  0, (1 2 ) 0
3: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP ';' }  0, (5 6 7 ) 2
4: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP ';' }  0, (3 4 ) 1
5: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP ';' }  0, (8 9 10 11 12 ) 3
6: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ';' }  0, (5 6 7 ) 2
7: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ';' }  0, (5 6 7 ) 2
8: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (13 14 15 ) 4
9: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
10: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
11: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
12: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' }  0, (8 9 10 11 12 ) 3
13: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' }  0, (16 17 18 ) 5
14: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' }  0, (13 14 15 ) 4
15: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' }  0, (13 14 15 ) 4
16: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (19 20 ) 6
17: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
18: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
19: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (21 22 23 24 ) 7
20: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (25 26 ) 8
21: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (27 28 29 30 31 32 ) 9
22: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 10
23: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 10
24: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
25: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 12
26: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 13
27: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
28: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
29: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 14
30: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 15
31: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 16
32: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ';' '<' '>' '+' '-' '*' '/' }  0, () 17
33: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP '[' ';' '=' '<' '>' '+' '-' '*' '/' }  0, () 10
34: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP '[' ';' '=' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
  0:   On expression to state 138 with (0 2 )
  1:   On logical_and_expression to state 46 with (1 4 )
  2:   On equality_expression to state 47 with (3 6 7 )
  3:   On relational_expression to state 48 with (5 9 10 11 12 )
  4:   On additive_expression to state 49 with (8 14 15 )
  5:   On multiplicative_expression to state 50 with (13 17 18 )
  6:   On unary_expression to state 51 with (16 )
  7:   On postfix_expression to state 52 with (19 )
  8:   On unary_operator to state 53 with (20 )
  9:   On primary_expression to state 54 with (21 )
  10:   On IDENTIFIER to state 55 with (22 23 33 )
  11:   On l_expression to state 56 with (24 27 28 34 )
  12:   On '-' to state 57 with (25 )
  13:   On '!' to state 58 with (26 )
  14:   On INT_CONSTANT to state 59 with (29 )
  15:   On FLOAT_CONSTANT to state 60 with (30 )
  16:   On STRING_LITERAL to state 61 with (31 )
  17:   On '(' to state 62 with (32 )


State 129:
0: [P31 4] assignment_statement -> l_expression '=' expression ';'  .   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 130:
0: [P63 4] l_expression -> l_expression '[' expression ']'  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' ',' '[' ']' ';' '=' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 131:
0: [P15 4] declarator -> declarator '[' constant_expression ']'  .   { ')' ',' '[' ';' }  1, () -1
  Reduce item(s): 0 


State 132:
0: [P54 4] postfix_expression -> IDENTIFIER '(' expression_list ')'  .   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' ',' ']' ';' '<' '>' '+' '-' '*' '/' }  1, () -1
  Reduce item(s): 0 


State 133:
0: [P29 5] statement -> IDENTIFIER '(' expression_list ')' ';'  .   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 134:
0: [P65 3] expression_list -> expression_list ',' expression  .   { ')' ',' }  1, () -1
1: [P33 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ')' ',' }  0, () 0
  0:   On OR_OP to state 75 with (1 )
  Reduce item(s): 0 


State 135:
0: [P76 3] declarator_list -> declarator_list ',' declarator  .   { ',' ';' }  1, () -1
1: [P15 1] declarator -> declarator  . '[' constant_expression ']'   { ',' '[' ';' }  0, () 0
  0:   On '[' to state 71 with (1 )
  Reduce item(s): 0 


State 136:
0: [P68 5] selection_statement -> IF '(' expression ')' statement  . ELSE statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
  0:   On ELSE to state 139 with (0 )


State 137:
0: [P69 5] iteration_statement -> WHILE '(' expression ')' statement  .   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 138:
0: [P70 5] iteration_statement -> FOR '(' expression ';' expression  . ';' expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
1: [P33 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ';' }  0, () 1
  0:   On ';' to state 140 with (0 )
  1:   On OR_OP to state 75 with (1 )


State 139:
0: [P68 6] selection_statement -> IF '(' expression ')' statement ELSE  . statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (1 2 3 4 5 6 7 ) 0
1: [P23 0] statement ->  . '{' statement_list '}'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 1
2: [P24 0] statement ->  . selection_statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (8 ) 2
3: [P25 0] statement ->  . iteration_statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (9 10 ) 3
4: [P26 0] statement ->  . assignment_statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (11 12 ) 4
5: [P27 0] statement ->  . RETURN expression ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 5
6: [P28 0] statement ->  . IDENTIFIER '(' ')' ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 6
7: [P29 0] statement ->  . IDENTIFIER '(' expression_list ')' ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 6
8: [P68 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 7
9: [P69 0] iteration_statement ->  . WHILE '(' expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 8
10: [P70 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 9
11: [P30 0] assignment_statement ->  . ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 10
12: [P31 0] assignment_statement ->  . l_expression '=' expression ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (13 14 ) 11
13: [P62 0] l_expression ->  . IDENTIFIER   { '[' '=' }  0, () 6
14: [P63 0] l_expression ->  . l_expression '[' expression ']'   { '[' '=' }  0, (13 14 ) 11
  0:   On statement to state 141 with (0 )
  1:   On '{' to state 24 with (1 )
  2:   On selection_statement to state 25 with (2 )
  3:   On iteration_statement to state 26 with (3 )
  4:   On assignment_statement to state 27 with (4 )
  5:   On RETURN to state 28 with (5 )
  6:   On IDENTIFIER to state 29 with (6 7 13 )
  7:   On IF to state 31 with (8 )
  8:   On WHILE to state 32 with (9 )
  9:   On FOR to state 33 with (10 )
  10:   On ';' to state 34 with (11 )
  11:   On l_expression to state 35 with (12 14 )


State 140:
0: [P70 6] iteration_statement -> FOR '(' expression ';' expression ';'  . expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (1 2 ) 0
1: [P32 0] expression ->  . logical_and_expression   { OR_OP ')' }  0, (3 4 ) 1
2: [P33 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' }  0, (1 2 ) 0
3: [P34 0] logical_and_expression ->  . equality_expression   { AND_OP OR_OP ')' }  0, (5 6 7 ) 2
4: [P35 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { AND_OP OR_OP ')' }  0, (3 4 ) 1
5: [P36 0] equality_expression ->  . relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' }  0, (8 9 10 11 12 ) 3
6: [P37 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' }  0, (5 6 7 ) 2
7: [P38 0] equality_expression ->  . equality_expression NE_OP relational_expression   { AND_OP OR_OP EQ_OP NE_OP ')' }  0, (5 6 7 ) 2
8: [P39 0] relational_expression ->  . additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (13 14 15 ) 4
9: [P40 0] relational_expression ->  . relational_expression '<' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
10: [P41 0] relational_expression ->  . relational_expression '>' additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
11: [P42 0] relational_expression ->  . relational_expression LE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
12: [P43 0] relational_expression ->  . relational_expression GE_OP additive_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' }  0, (8 9 10 11 12 ) 3
13: [P44 0] additive_expression ->  . multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' }  0, (16 17 18 ) 5
14: [P45 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' }  0, (13 14 15 ) 4
15: [P46 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' }  0, (13 14 15 ) 4
16: [P47 0] multiplicative_expression ->  . unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (19 20 ) 6
17: [P48 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
18: [P49 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (16 17 18 ) 5
19: [P50 0] unary_expression ->  . postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (21 22 23 24 ) 7
20: [P51 0] unary_expression ->  . unary_operator postfix_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (25 26 ) 8
21: [P52 0] postfix_expression ->  . primary_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (27 28 29 30 31 32 ) 9
22: [P53 0] postfix_expression ->  . IDENTIFIER '(' ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 10
23: [P54 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 10
24: [P55 0] postfix_expression ->  . l_expression INC_OP   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
25: [P66 0] unary_operator ->  . '-'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 12
26: [P67 0] unary_operator ->  . '!'   { IDENTIFIER INT_CONSTANT STRING_LITERAL FLOAT_CONSTANT '(' }  0, () 13
27: [P56 0] primary_expression ->  . l_expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
28: [P57 0] primary_expression ->  . l_expression '=' expression   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
29: [P58 0] primary_expression ->  . INT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 14
30: [P59 0] primary_expression ->  . FLOAT_CONSTANT   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 15
31: [P60 0] primary_expression ->  . STRING_LITERAL   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 16
32: [P61 0] primary_expression ->  . '(' expression ')'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP ')' '<' '>' '+' '-' '*' '/' }  0, () 17
33: [P62 0] l_expression ->  . IDENTIFIER   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' '[' '=' '<' '>' '+' '-' '*' '/' }  0, () 10
34: [P63 0] l_expression ->  . l_expression '[' expression ']'   { AND_OP OR_OP EQ_OP NE_OP LE_OP GE_OP INC_OP ')' '[' '=' '<' '>' '+' '-' '*' '/' }  0, (33 34 ) 11
  0:   On expression to state 142 with (0 2 )
  1:   On logical_and_expression to state 46 with (1 4 )
  2:   On equality_expression to state 47 with (3 6 7 )
  3:   On relational_expression to state 48 with (5 9 10 11 12 )
  4:   On additive_expression to state 49 with (8 14 15 )
  5:   On multiplicative_expression to state 50 with (13 17 18 )
  6:   On unary_expression to state 51 with (16 )
  7:   On postfix_expression to state 52 with (19 )
  8:   On unary_operator to state 53 with (20 )
  9:   On primary_expression to state 54 with (21 )
  10:   On IDENTIFIER to state 55 with (22 23 33 )
  11:   On l_expression to state 56 with (24 27 28 34 )
  12:   On '-' to state 57 with (25 )
  13:   On '!' to state 58 with (26 )
  14:   On INT_CONSTANT to state 59 with (29 )
  15:   On FLOAT_CONSTANT to state 60 with (30 )
  16:   On STRING_LITERAL to state 61 with (31 )
  17:   On '(' to state 62 with (32 )


State 141:
0: [P68 7] selection_statement -> IF '(' expression ')' statement ELSE statement  .   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 


State 142:
0: [P70 7] iteration_statement -> FOR '(' expression ';' expression ';' expression  . ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 0
1: [P33 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ')' }  0, () 1
  0:   On ')' to state 143 with (0 )
  1:   On OR_OP to state 75 with (1 )


State 143:
0: [P70 8] iteration_statement -> FOR '(' expression ';' expression ';' expression ')'  . statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (1 2 3 4 5 6 7 ) 0
1: [P23 0] statement ->  . '{' statement_list '}'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 1
2: [P24 0] statement ->  . selection_statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (8 ) 2
3: [P25 0] statement ->  . iteration_statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (9 10 ) 3
4: [P26 0] statement ->  . assignment_statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (11 12 ) 4
5: [P27 0] statement ->  . RETURN expression ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 5
6: [P28 0] statement ->  . IDENTIFIER '(' ')' ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 6
7: [P29 0] statement ->  . IDENTIFIER '(' expression_list ')' ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 6
8: [P68 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 7
9: [P69 0] iteration_statement ->  . WHILE '(' expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 8
10: [P70 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 9
11: [P30 0] assignment_statement ->  . ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, () 10
12: [P31 0] assignment_statement ->  . l_expression '=' expression ';'   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  0, (13 14 ) 11
13: [P62 0] l_expression ->  . IDENTIFIER   { '[' '=' }  0, () 6
14: [P63 0] l_expression ->  . l_expression '[' expression ']'   { '[' '=' }  0, (13 14 ) 11
  0:   On statement to state 144 with (0 )
  1:   On '{' to state 24 with (1 )
  2:   On selection_statement to state 25 with (2 )
  3:   On iteration_statement to state 26 with (3 )
  4:   On assignment_statement to state 27 with (4 )
  5:   On RETURN to state 28 with (5 )
  6:   On IDENTIFIER to state 29 with (6 7 13 )
  7:   On IF to state 31 with (8 )
  8:   On WHILE to state 32 with (9 )
  9:   On FOR to state 33 with (10 )
  10:   On ';' to state 34 with (11 )
  11:   On l_expression to state 35 with (12 14 )


State 144:
0: [P70 9] iteration_statement -> FOR '(' expression ';' expression ';' expression ')' statement  .   { IDENTIFIER IF ELSE WHILE FOR RETURN '{' '}' ';' }  1, () -1
  Reduce item(s): 0 



